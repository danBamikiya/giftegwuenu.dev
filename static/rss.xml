<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gift Egwuenu]]></title><description><![CDATA[A blog on frontend development, technical career and soft skills. Written by Gift Egwuenu]]></description><link>https://giftegwuenu.com</link><generator>RSS for Node</generator><lastBuildDate>Fri, 12 Feb 2021 05:11:59 GMT</lastBuildDate><atom:link href="https://giftegwuenu.com/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Buddy vs. Travis CI: A Detailed Comparison]]></title><description><![CDATA[I wrote an article for The Devops Corner comparing features of BuddyCI and TravisCI.]]></description><link>https://giftegwuenu.com/buddy-vs-travis-ci-a-detailed-comparison/</link><guid isPermaLink="true">https://giftegwuenu.com/buddy-vs-travis-ci-a-detailed-comparison/</guid><pubDate>Thu, 11 Feb 2021 11:57:52 GMT</pubDate><content:encoded><![CDATA[[Continuous Integration(CI)](https://en.wikipedia.org/wiki/Continuous_integration) and [Continuous Deployment(CD](https://en.wikipedia.org/wiki/Continuous_deployment)) are both software development techniques mainly used in modern development practices. The concept of CI is a process that involves the practice of merging all developers' working branches on a shared repository several times a day. Each branch goes through an automated build check which in turn runs tests to ensure no errors are found before merging. The main goal of CI is to prevent integration problems, referred to as "integration hell" in its early adoption. On the other hand,  Continuous Deployment is closely related to Continuous Integration and refers to a software engineering approach in which software functionalities are delivered frequently through automated deployments.

In this post, we’ll take a look at two of the most popular CI/CD tools and outline the features of both, and also get to know each of them better. Let’s get right into it, shall we?

## What is Buddy?

[Buddy](https://buddy.works/) is a smart CI/CD tool for development designed to provide a suite of automation tools that modern development teams can use to accelerate their development lifecycle from coding, to testing and delivering the products to their customers. It uses delivery pipelines to build, test and deploy software from [GitHub](https://en.wikipedia.org/wiki/GitHub), [BitBucket](https://en.wikipedia.org/wiki/Bitbucket), and [GitLab](https://en.wikipedia.org/wiki/GitLab). The pipelines are created with over 100 ready-to-use actions that can be set up in different ways.

![](https://paper-attachments.dropbox.com/s_E2A5020A16692F11AD6D6D1650A197ED486465DEE7728C5E82E095B4FBB8B03E_1565680135825_Screen+Shot+2019-08-13+at+8.08.38+AM.png)

Buddy is configured to perform predefined actions in a sequence which are called Pipelines. These pipelines can be triggered automatically on push, manually, or recurrently. Let’s take a look at some features Buddy comes bundled with.

## Key Features

Buddy offers the following benefits:

* Native Docker support.
* Flexible Build Configuration - Allows both UI and YAML configuration for creating Pipelines.
* Over 100+ ready-to-use actions.
* Support Instant Deployments to FTP/SFTP, AWS, Google Cloud, Digital Ocean, Heroku, Kubernetes, etc.
* Integration with GitHub, GitLab, and BitBucket out of the box.
* Builds are run in isolated containers with cached dependencies.
* 5-minute setup of the complete environment.

  ![Demo of Buddy Workflow](https://paper-attachments.dropbox.com/s_E2A5020A16692F11AD6D6D1650A197ED486465DEE7728C5E82E095B4FBB8B03E_1566143344179_3w9Yy6a00q.gif)

## What is Travis CI?

Travis CI is a hosted continuous integration service that is free for open-source projects and used to build and test software projects. Travis CI is focused on enabling users to quickly test their code as it’s being deployed. It has support for both small and large code changes, and it watches when a change is detected, It can provide feedback if the change was successful or not.  Travis CI is configured by adding a file named `.travis.yml`, which is a [YAML](https://en.wikipedia.org/wiki/YAML) format text file, to the root directory of the repository.

![](https://paper-attachments.dropbox.com/s_E2A5020A16692F11AD6D6D1650A197ED486465DEE7728C5E82E095B4FBB8B03E_1565680945160_Screen+Shot+2019-08-13+at+8.22.09+AM.png)

Travis CI has support for container builds, and also supports Linux Ubuntu and Mac OS platforms as well as have support for other different programming languages, such as JavaScript, Ruby, PHP, Java, C#, and a lot more.

## Key Features

* Setup in seconds- Getting up and running with Travis CI is as easy as enabling a project, adding basic build instructions to your project, and committing code.
* Pull Request Support - Test every pull request in your project before it gets merged.
* Bundled with support for 20 different languages out of the box, including Javascript and Node.js, Ruby, PHP, Python, Mac/iOS, as well as Docker.
* Different Platform support- Pre-installed database services and can simply be enabled in your build configuration, MySQL, PostgreSQL, ElasticSearch, Redis, Memcached, etc.
* Supports automatic deployment for passing builds.



  ![Demo of Travis CI Workflow](https://paper-attachments.dropbox.com/s_E2A5020A16692F11AD6D6D1650A197ED486465DEE7728C5E82E095B4FBB8B03E_1566143106882_J0bzM1uvQ8.gif)

## Detailed Comparison Between Buddy vs Travis CI

|                                   | Buddy                                                                                                                       | Travis CI                                                                                                             |
| --------------------------------- | --------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- |
| **Build Configuration**           | All configurations are driven by the web platform and as well as a YAML file depending on the option you decide to go with. | All configurations are driven by YAML files within the code.                                                          |
| **Web UI**                        | Intuitive UI as well as ability to get up and running in 5 minutes and setup configuration on the UI or with YAML files.    | Decent UI that outlines all the benefits of the platform but one will have to set up configuration using a YAML file. |
| **Continuous Delivery Pipelines** | With Buddy, you can define multiple actions for a pipeline. I.e upload files to a server and update assets on every push.   | Travis has a similar workflow which is called Build Stages. It allows you to group and build jobs in parallel.        |
| **Docker Support**                | Buddy comes bundled with Docker support.                                                                                    | Travis CI support Docker only in a specific environment. It doesn’t have support for Docker on macOS at the moment.   |
| **Version Control**               | Buddy is available on both GitHub, GitLab, and BitBucket.                                                                   | Travis CI only offers limited support for projects hosted on GitHub.                                                  |
| **Platforms**                     | Buddy is compatible with all platforms including Mac and Linux.                                                             | Travis has support for only Mac, Linux, and iOS platforms.                                                            |

## Wrapping Up

In this article, We have seen a comparison between Buddy and Travis CI automation tools and we looked at both of them extensively. Now that we have a good understanding of what Buddy and Travis CI can do and also have an idea of the best use case for each of the tools. With this, we can then go ahead and decide which tool to use for our projects going forward.]]></content:encoded></item><item><title><![CDATA[How To Get Your First Job In Tech]]></title><description><![CDATA[In this video, I'll share how you can land your first tech job and tips to help you stand out in your job search.]]></description><link>https://giftegwuenu.com/how-to-get-your-first-job-in-tech/</link><guid isPermaLink="true">https://giftegwuenu.com/how-to-get-your-first-job-in-tech/</guid><pubDate>Mon, 01 Feb 2021 09:06:36 GMT</pubDate><content:encoded><![CDATA[Today, a lot of people are on the job market and are looking to get their first tech job but looking for a job isn't the easiest thing to do in the world. A lot of factors can affect your job searching quest. In this video, I'll share how you can land your first tech job and tips to help you stand out in your job search.

https://www.youtube.com/embed/MpXs4ermJ7Q

### Timestamps

[0:00](https://www.youtube.com/watch?v=MpXs4ermJ7Q&t=0s) Intro 

[1:02](https://www.youtube.com/watch?v=MpXs4ermJ7Q&t=62s) Focus On A Niche 

[2:13](https://www.youtube.com/watch?v=MpXs4ermJ7Q&t=133s) Build a Portfolio 

[5:57](https://www.youtube.com/watch?v=MpXs4ermJ7Q&t=357s) Prepare to Ace Interviews 

[11:25](https://www.youtube.com/watch?v=MpXs4ermJ7Q&t=685s) Advice from Twitter 

[13:13](https://www.youtube.com/watch?v=MpXs4ermJ7Q&t=793s) Conclusion and Subscribe 🌼]]></content:encoded></item><item><title><![CDATA[How To Get Into Tech In 2021]]></title><description><![CDATA[Tech is growing exponentially. The best time to get into tech is now. In this video, I'll share how you can make the switch or start a new career in tech this year and actionable tips you can leverage to help you on your journey.]]></description><link>https://giftegwuenu.com/how-to-get-into-tech-in-2021/</link><guid isPermaLink="true">https://giftegwuenu.com/how-to-get-into-tech-in-2021/</guid><pubDate>Mon, 25 Jan 2021 09:03:24 GMT</pubDate><content:encoded><![CDATA[Tech is growing exponentially. The best time to get into tech is now. In this video, I'll share how you can make the switch or start a new career in tech this year and actionable tips you can leverage to help you on your journey.

https://www.youtube.com/embed/3trGWe60K4I



### ⏰⌛️ Video Timestamps

[0:00](https://www.youtube.com/watch?v=3trGWe60K4I&t=0s) Intro 

[0:41](https://www.youtube.com/watch?v=3trGWe60K4I&t=41s) Outcome from this video 

[0:56](https://www.youtube.com/watch?v=3trGWe60K4I&t=56s) Tech Industry Myths 

[1:56](https://www.youtube.com/watch?v=3trGWe60K4I&t=116s) Tips to Start your Journey in Tech 

[2:17](https://www.youtube.com/watch?v=3trGWe60K4I&t=137s) Tip #1: Pick a Niche 

[4:01](https://www.youtube.com/watch?v=3trGWe60K4I&t=241s) Different Career Fields In Tech 

[5:01](https://www.youtube.com/watch?v=3trGWe60K4I&t=301s) Tip #2: Create an Actionable Plan 

[5:53](https://www.youtube.com/watch?v=3trGWe60K4I&t=353s) Tip #3: Learn by Building 

[7:28](https://www.youtube.com/watch?v=3trGWe60K4I&t=448s) Tip #4: Join a Community [](https://www.youtube.com/watch?v=3trGWe60K4I&t=575s)

[9:35](https://www.youtube.com/watch?v=3trGWe60K4I&t=575s) Wrap up & Subscribe

Don't forget to share and subscribe to my channel.]]></content:encoded></item><item><title><![CDATA[5 Ways to Make Passive Income in Tech]]></title><description><![CDATA[Many developers work a 9-5 and that's great! But are you aware you can consistently make passive income by investing some time outside of your full-time job?]]></description><link>https://giftegwuenu.com/5-ways-to-make-passive-income-in-tech/</link><guid isPermaLink="true">https://giftegwuenu.com/5-ways-to-make-passive-income-in-tech/</guid><pubDate>Mon, 07 Dec 2020 12:58:29 GMT</pubDate><content:encoded><![CDATA[Many developers work a 9-5 and that's great! I do too :) But are you aware you can consistently make passive income by investing some time outside of your full-time job? In this video, I'll share proven ways of making a side income as a developer and tips on how to go about it.

https://www.youtube.com/embed/tQBh53KmxRU

### ⏰⌛️ Video Timestamps

[0:00](https://www.youtube.com/watch?v=tQBh53KmxRU&t=0s) Intro [](https://www.youtube.com/watch?v=tQBh53KmxRU&t=13s)

[0:13](https://www.youtube.com/watch?v=tQBh53KmxRU&t=13s) What this video is about? 

[1:41](https://www.youtube.com/watch?v=tQBh53KmxRU&t=101s) Content Creation 

[6:34](https://www.youtube.com/watch?v=tQBh53KmxRU&t=394s) Build an App / Website 

[7:42](https://www.youtube.com/watch?v=tQBh53KmxRU&t=462s) Create an E-book or Online Course 

[9:06](https://www.youtube.com/watch?v=tQBh53KmxRU&t=546s) Affiliate Marketing [](https://www.youtube.com/watch?v=tQBh53KmxRU&t=688s)

[11:28](https://www.youtube.com/watch?v=tQBh53KmxRU&t=688s) Freelance Projects [](https://www.youtube.com/watch?v=tQBh53KmxRU&t=740s)

[12:20](https://www.youtube.com/watch?v=tQBh53KmxRU&t=740s) Outro & Subscribe 

### 🔗 Links Mentioned

[Web Monetization with Coil](https://coil.com) [](https://www.youtube.com/redirect?q=https%3A%2F%2Fcoil.com&v=tQBh53KmxRU&redir_token=QUFFLUhqbnhfd3BPZC01a25wWTdRU1BvVWVrYVVLellrZ3xBQ3Jtc0tua2RhRGV3T3FZU2lPZEJ2MG1kY0ttMDlWUG1wV0k3dVEyYkZZLWltcnhuYUd2N3lTZ2hNLWw5Qi1kM2lGR0JmYXpLLWppRVZFZ0ZiS1o4b0hhZXVieXBwRk5SRVRpXzBjdnlkQ2dCU2h3V0dxYXJITQ%3D%3D&event=video_description)

[Carbon Ads](https://www.carbonads.net/) [](https://www.youtube.com/redirect?q=https%3A%2F%2Fwww.carbonads.net%2F&v=tQBh53KmxRU&redir_token=QUFFLUhqbEEwcG1WZTdSaDV2NHUxc01DWGtxV3dlcUswUXxBQ3Jtc0tueHNBQ0FZdUhmelMxbE9zMWd6RG1KUjd6LW5waHlfQWZ0REF2d2YxNVFjdk5OS0JhNGZtdm1kRWFVTUNUQ3dGNE1fNi1obVA0NnQ0QlVJTTNTWXlTanFaRVo3aWhwUE9ud2dycUg1R1hncUNnZEhLWQ%3D%3D&event=video_description)

[List of Publications that pay up to $600](https://talk.hyvor.com/blog/write-for-get-paid-for-developers/) 

Hope you enjoy the video :)]]></content:encoded></item><item><title><![CDATA[How to Craft a Developer Resume]]></title><description><![CDATA[Do you want to stand out in your job applications, show the recruiter at one glance your abilities and strength. In this post, I'll share tips and ideas for creating a great tech resume that you can be sure will make you stand out in the pool of job applications.]]></description><link>https://giftegwuenu.com/how-to-craft-a-developer-resume/</link><guid isPermaLink="true">https://giftegwuenu.com/how-to-craft-a-developer-resume/</guid><pubDate>Mon, 09 Nov 2020 09:38:50 GMT</pubDate><content:encoded><![CDATA[Do you want to stand out in your job applications, show the recruiter at one glance your abilities and strength? This video will give you tips and ideas for creating a great tech resume that you can be sure will make you stand out in the pool of job applications.

https://www.youtube.com/embed/akNtVGUUBAw

🌱 Timestamps

[0:00](https://www.youtube.com/watch?v=akNtVGUUBAw&t=0s) Intro 

[1:28](https://www.youtube.com/watch?v=akNtVGUUBAw&t=88s) Why you need a great resume?

[2:11](https://www.youtube.com/watch?v=akNtVGUUBAw&t=131s) Tools for creating a Resume

[4:50](https://www.youtube.com/watch?v=akNtVGUUBAw&t=290s) Key sections to include in your resume 

[14:17](https://www.youtube.com/watch?v=akNtVGUUBAw&t=857s) Tips for creating a resume that stands out 

[20:18](https://www.youtube.com/watch?v=akNtVGUUBAw&t=1218s) Outro & Subscribe ❤️ 

[Canva Resume Demo](https://www.canva.com/design/DAEMua0hkjY/RIdjaLf20fj3FiPKApSVHg/view?utm_content=DAEMua0hkjY&utm_campaign=designshare&utm_medium=link&utm_source=publishsharelink)\
\
[Want to create a Resume now? Here's how to](https://www.canva.com/tools/resume-maker-v1/?irgwc=1&utm_medium=affiliate&utm_source=Gift%20Egwuenu&clickId=2ckw13zt9xyLTq6wUx0Mo3EHUkE1iUTaly9Iyo0)

[](https://www.canva.com/tools/resume-maker-v1/?irgwc=1&utm_medium=affiliate&utm_source=Gift%20Egwuenu&clickId=2ckw13zt9xyLTq6wUx0Mo3EHUkE1iUTaly9Iyo0)Hope you enjoy the video :)]]></content:encoded></item><item><title><![CDATA[Vuejs Global 2020: A Recap]]></title><description><![CDATA[A couple of weeks ago, I had a fantastic time speaking and attending  Vue.js Global a global online conference that held on September 17th and 18th. In this article, I'll share my thoughts and experience from attending the conference and some of my takeaways.]]></description><link>https://giftegwuenu.com/vuejs-global-2020-a-recap/</link><guid isPermaLink="true">https://giftegwuenu.com/vuejs-global-2020-a-recap/</guid><pubDate>Wed, 30 Sep 2020 10:50:39 GMT</pubDate><content:encoded><![CDATA[
A couple of weeks ago, I had a fantastic time speaking and attending [Vue.js Global](https://www.vuejs.amsterdam/), a global online conference held on September 17th and 18th. This article will share my thoughts and experience from attending the conference and some of my takeaways.

Overall, I'll say I had such a good time at the conference, even though it was online and we all miss attending in-person conferences. This one didn't feel so much like that because the community made it come alive. There were so many memorable moments during the conference.

I had the chance to be a part of the Speaker's Dinner a day before the conference, and it was so much fun. You can tell my face is missing from the zoom call, but I was present 😉. We had so much fun playing a Pub Quiz hosted by [Israel Roldan](https://twitter.com/isro_me) (PS: My manager, I'm so proud to be working with him!)

![Speaker Dinner Celebration via Zoom](https://res.cloudinary.com/lauragift/image/upload/v1601465163/Screen_Shot_2020-09-16_at_5.12.12_PM_jlm4rf.png "Speaker Dinner Celebration via Zoom")

> **TL: DR;**  The conference was so much fun and I took away so many things and looking forward to exploring and using them. 

The conference was a [two-day conference](https://www.vuejs.amsterdam/program) packed with so much goodness and some exciting news everyone was looking forward to... I'm sure you already know what that is but more on that later.

# Conference Day 1 (September 17th)

We kicked off the conference with [Jos Gerards'](https://twitter.com/josgerards88) opening remarks and welcomed both attendees and speakers. I liked many cool things about the conference. I'll share some hints as we go on, and you can also [let me know if you feel the same way](https://twitter.com/lauragift_).

Our hosts for the conference were [Maria Lamardo](https://twitter.com/MariaLamardo) and [Ben Hong](https://twitter.com/bencodezen) and they took over with **speaker** **introductions** and **QnA Moderation**. I must say they both did a fantastic job pulling together and keeping everyone hyped for two days. That's no easy task, not that I've hosted a conference before, but I can tell it must have taken a lot of work to pull it off.

**Here's a rundown of some talks I attended from the first day of the conference. Watch out for yours truly!**

### Test Driving Vue 3 by Anthony Gore

[Anthony Gore](https://twitter.com/anthonygore) is the creator of [VuejsDevelopers](https://vuejsdevelopers.com) and a Vue Community Partner. In his talk, he takes Vue 3 on a Test Drive and explains why some changes were made from the way it works in Vue 2 and the ideas behind Vue 3. He shows how to use Vue 3 to build a reusable modal detailing some of the new features like Fragments, Teleports, and Composition API.

### The Future of VueX by Kai King

<https://www.youtube.com/watch?v=ajGglyQQD0k>

[Kia King](https://twitter.com/KiaKing85) is a member of the Vue Core Team, and he focused his talk on the current state of VueX and what's coming in the future of VueX. VueX 3 support will work for Vue 2; likewise, VueX 4 will work with Vue3. The focus of Vuex 4 is for compatibility. He also shares the new installation process and some of the new features coming in Vuex 4, such as new bundles aligned with Vue 3 and slightly better TypeScript support. He also shares the direction for the future **"Vuex5"** which is still in the RFC stage, and he shared features that this new version will ship with.

### Migrating a big old codebase to Vue 3: what I'm excited about! by Natalia Tepluhina

<https://www.youtube.com/watch?v=K1JoWmXh4qA&t=58s>

[Natalia Tepluhina](https://twitter.com/N_Tepluhina) is a member of the Vue Core team and Staff Frontend Engineer at GitLab. In her talk, she shared how she plans to migrate a big old codebase(Gitlab Codebase) to Vue 3 and some of the things she's excited about. In general, she pointed out things to watch out for like mixins, and she recommends as a go-to use Stateful components as Functional components can grow performance gains by 2.x.

### Experience of the new Vue by Rahul Kadyan

![New Vue Experience](https://res.cloudinary.com/lauragift/image/upload/v1601465192/Screen_Shot_2020-09-17_at_2.26.07_PM_fmbrgt.png)

[Rahul Kaydan](https://twitter.com/znck0) is also a Vue.js core team member and works as a software engineer at Grammarly. His talk is about his experience with Vue 3 and its ecosystem. He shares his experience working with Composition API, Compiler, and Vite.

### Vue 3 Reactivity Under The Hood by Marc Backes

![Vue Reactivity](https://res.cloudinary.com/lauragift/image/upload/v1601465297/Screen_Shot_2020-09-17_at_2.47.16_PM_qr8yxv.png)

[Marc Backes](https://twitter.com/themarcba) is a freelance developer and host of Whiskey Wednesdays. In his talk, he shared in a demo how Vue 3 Reactivity works under the hood by building a simplified version from scratch. He took us through how Reactivity worked in Vue 2 and showed how Vue 3 reactivity works differently.

### Introduction to Vite & Vitepress by Tim Benniks

[Tim's](https://twitter.com/timbenniks) talk was one of the best in terms of delivery...he went all out on this one and made us all look like amateurs! His talk covered Vite and Vitepress, and it was an excellent introduction to Vite for me personally. I've never used it in a project. I only remember when it was released, and it was nice to see how Vite and Vitepress works from scratch.

<https://www.youtube.com/watch?v=gojCkw5Ih7E>

### The Exciting New Features for Routing in Vue3; Vue Router 4 by Eduardo San Martin Morote

![Vue Router 4 Talk](https://res.cloudinary.com/lauragift/image/upload/v1601465206/Screen_Shot_2020-09-17_at_3.45.40_PM_xjjtm1.png)

[Eduardo](https://twitter.com/posva) is the creator of Vue Router. He shared some exciting new features coming in Vue Router 4. His talk showed features no longer supported and some useful features that's coming in the latest version.

### JAMstack FTW- Static Site Generation With Gridsome by Gift Egwuenu

I gave a talk, and it covered an introduction to Gridsome and the possibilities of what you can achieve with the Jamstack. I showed how you could also extend the functionalities of a Gridsome Application by leveraging the API's it ships with. At this point, technical difficulties set in, and I wasn't able to complete my talk(it was prerecorded, and the video was skipping). No worries though, I have a link to [my slides](https://speakerdeck.com/lauragift21/jamstack-ftw-static-site-generation-with-gridsome) and the recording if you missed it or want to see the full version of the [talk on my channel](https://youtu.be/E3kyCodVVOM).

<https://www.youtube.com/watch?v=E3kyCodVVOM>

### Creating a JAM Stack product from scratch by Alex Jover

![Alex Jover Talk](https://res.cloudinary.com/lauragift/image/upload/v1601465058/Screen_Shot_2020-09-30_at_3.46.57_AM_juuxsy.png)

[Alex Jover](https://twitter.com/alexjoverm) is the creator of [Vue Dose](https://vuedose.tips/) and Organizer of Vue.js Spain. In his talk, he shared the process of rebuilding Vue Dose from the ground up with Nuxt and Storyblok. He also showed the problems with the first version and what needed to be improved, and the **seven steps** he went through to recreate a new version of Vue Dose.

### Dynamic from static with the right (JAM)stack by Maya Shavin

![Maya Shavin Talk](https://res.cloudinary.com/lauragift/image/upload/v1601465107/Screen_Shot_2020-09-30_at_3.52.57_AM_r4b56o.png)

[Maya Shavin](https://twitter.com/MayaShavin) is a Senior Frontend Developer at Cloudinary. In her talk, she shares what the Jamstack is and explores some tools in the Jamstack ecosystem. She mentioned something I think I needed to pay attention to because we have so many options to choose from, doesn't mean you have to use every tool in your application but instead think from the performance perspective. So asking the question does adding all of these services make my app more performant?

# Conference Day 2 (September 18th)

The second day of the conference kicked off with the organizer Jos Gerards welcoming attendees back for another day of great content. The talks for the day were all packed with news and great content in the Vue community. Ranging from a lineup of Nuxt.js seasoned featured speakers and the most anticipated presentation - Evan You's announcement(Wait for it...)

**Here's a rundown of some of the talks from the second day of the conference.**

### Optimizing for Super Sonic Speed in Vue.js & Gridsome by Shopido Ayomide

<https://www.youtube.com/watch?v=U3oYroX1LCQ>

[Shopido Ayomide](https://twitter.com/developerayo)  was the first speaker for the day. He's a developer Advocate at Fleek and also Community Organizer. His talk focused on optimizing speed in Vue & Gridsome. He shared why speed should be treated as a feature and the importance of performance optimization in 
Vue.js applications.

### Chakra UI Vue by Jonathan Bakebwa

[Jonathan](https://twitter.com/codebender828) is the creator of Chakra UI Vue and UI Engineer at Akkadu. He shows us some Chakra UI Vue capabilities with demos of some popular websites he recreated with Chakra UI Vue in his talk. The component library is built from the ground up with accessibility in mind. I'm a big fan of Chakra UI and love that it's a fast-growing component library and one of my goto libraries to use in a project.

### The state of Nuxt by Sebastien Chopin

[Sebastien Chopin](https://twitter.com/Atinux) is the co-author of Nuxt.js. His talk focused on the state of Nuxt and recent features that were introduced in the current release Nuxt v2.14 including Full Static Mode, Smart Generate that skips webpack build when there are no code changes. He also shared some stats from this year, a project from the Nuxt team called [Vue Telemetry](https://vuetelemetry.com/), and finally talked about some changes coming in Nuxt.js v3.0

### Nuxt.js Architecture by Pooya Parsa
[Pooya Parsa](https://twitter.com/_pi0_) is the head of framework at Nuxt.js. In his talk, he goes through a deep dive of Nuxt architecture updates and an in-depth look at some of the features coming in Nuxt v3.0 - Typescript Support, updates to Builder 3, multi-app support. He also shared there's ongoing work in creating a guide for migrating from Nuxt 2 to Nuxt 3.

### Nuxt.js as a headless CMS by Debbie O'Brien

[Debbie O'Brien](https://twitter.com/debs_obrien) is the head of learning at Nuxt. She shared one of the new features in Nuxt that I'm excited about [Nuxt Content Module](https://content.nuxtjs.org). She explained what a headless CMS is and how Nuxt content works and demonstrates how to get the Content module up and running.

### SEO in a Vue.js world by Alexander Lichter
[Alexander](https://twitter.com/TheAlexLichter) is a Nuxt.js core maintainer and web developer consultant. In his talk, he walks through what SEO is and the importance of optimizing SEO and detailing the three pillars of SEO - on-page, off-page, and technical and shared some tips for improving SEO on Vue.js applications.

### What you'll love in Vue 3 by Alex Kyriakidis
[Alex Kyriakidis](https://twitter.com/hootlex) is the founder of Vue School. In his talk, he shares some exciting features we'll love in Vue 3. I enjoyed learning about some features of Vue 3 from Alex as he talked through them with examples. No more Reactivity Caveats in Vue 3, introduced teleports with some use cases, and how composition API will help with logic reuse and code organization flexibility.

<https://www.youtube.com/watch?v=vykQhui3tfE>

### The State of Vue 3 featuring Evan You's Announcement

This was one of the sessions we've been waiting for and anticipating to hear what news [Evan You](https://twitter.com/youyuxi) had for us in his Keynote, which streamed live. I guessed right on this one, and I was right.

[Vue 3](https://v3.vuejs.org/guide/introduction.html) **"One Piece"** was released on September 18th at 4:45 pm(WAT). I even got the time right; that's to show you how excited I was! You can watch the recording directly. I want to say I appreciate the work that went into the release of Vue 3 when Evan shared the journey to Vue 3. It took two years of active development to get this out the door so thank you to every member of the Core Team and Community doing the excellent work of contributing to make Vue the fantastic framework that it is.

<https://www.youtube.com/watch?v=Vp5ANvd88x0>

Following the announcement, there was a live QnA session where some members of the community and Panel got to ask Evan some questions. It was so good and nicely put together.

![QnA Session with Evan You](https://res.cloudinary.com/lauragift/image/upload/v1601465296/Screen_Shot_2020-09-18_at_5.31.57_PM_mqgrto.png)


### After Party and Community Connections

Well, after the talks ended for the conference, you'd think it was the end of the conference since it's online and there's no physical after party. That was not the case for us. We had a great time during the conference, yes but still had many people hanging around waiting for the after-party! 🎉

Jos Gerards played some lovely music. We even had a conference Spotify Playlist where people can add cool songs from where their locations. I liked that the [Hopin](https://hopin.to/) platform had almost the same experience you'll get from attending an in-person conference. I checked out the Sponsors Booth and did a couple of networking with some attendees for me. This was one of the things I appreciated about the conference. The chat was so lively, and everyone was excited, and you could feel it from wherever you're connected from around the world.

# Takeaways and What I'm looking forward to next time!
The conference was very well put together, and I had a lot of fun participating in it. Kudos and great job to the team for putting on such a great event.

[Vue.js Amsterdam 2021](https://vuejs.amsterdam) is freeeeee! Meaning you get the same experience from this year with even more vibes, but for free, isn't that just great! [You can sign up for a ticket now](https://www.vuejs.amsterdam/account/register?event=vue-js-amsterdam-2021). I've already got my ticket! 😅

![Vuejs amsterdam 2021 ticket](https://res.cloudinary.com/lauragift/image/upload/v1601465000/Screen_Shot_2020-09-29_at_1.29.05_PM_qayo2k.png)

I'm looking forward to the awesomeness we create next year. Vue Global conference is brought to the community by  [Passionate People](https://passionatepeople.io/) - a developer consultancy in Amsterdam, where I work(shameless plug 😜).

The videos from the conference will be available on [Youtube](https://www.youtube.com/vuejsamsterdam?sub_confirmation=1) with some already uploaded and on the Conference Video Portal, so keep an eye on there to catch the talks you missed.
]]></content:encoded></item><item><title><![CDATA[Build a Blog using Nuxt.js Content Module]]></title><description><![CDATA[In this video, I'll share what you need to know about the Nuxt Content Module and how to use it in your Nuxt applications.]]></description><link>https://giftegwuenu.com/build-a-blog-using-nuxt-js-content-module/</link><guid isPermaLink="true">https://giftegwuenu.com/build-a-blog-using-nuxt-js-content-module/</guid><pubDate>Mon, 10 Aug 2020 16:02:52 GMT</pubDate><content:encoded><![CDATA[[Nuxt.js](https://nuxtjs.org) is one of the technologies I'm really interested in and I made this video showing you how to use the Nuxt Content. [Nuxt.js Content](https://content.nuxtjs.org) is one of the newest additions to Nuxtjs. In this tutorial, we'll create a blog using Nuxt.js content as a Headless CMS. 

GitHub Repo: https://github.com/lauragift21/nuxt-content-video

https://www.youtube.com/embed/zDCacgvw0A0

Timestamps ✨   
[0:00](https://www.youtube.com/watch?v=zDCacgvw0A0&t=0s) -  Intro   
[0:55](https://www.youtube.com/watch?v=zDCacgvw0A0&t=55s) -  What is Nuxt.js?  
[1:47](https://www.youtube.com/watch?v=zDCacgvw0A0&t=107s) -  Setup a Nuxt app  
[2:13](https://www.youtube.com/watch?v=zDCacgvw0A0&t=133s) -  What is Nuxt Content?  
[4:45](https://www.youtube.com/watch?v=zDCacgvw0A0&t=285s) -  Install Nuxt Content   
[5:18](https://www.youtube.com/watch?v=zDCacgvw0A0&t=318s) -  Creating Content    
[7:31](https://www.youtube.com/watch?v=zDCacgvw0A0&t=451s) -  Fetching and Displaying Content  
[15:42](https://www.youtube.com/watch?v=zDCacgvw0A0&t=942s) - Live Editing in Dev Mode  
[16:16](https://www.youtube.com/watch?v=zDCacgvw0A0&t=976s) - API Endpoints Preview  
[16:54](https://www.youtube.com/watch?v=zDCacgvw0A0&t=1014s) - Static Deployment  
[18:04](https://www.youtube.com/watch?v=zDCacgvw0A0&t=1084s) -  Outro and Subscribe

Hope you enjoy the video :)

]]></content:encoded></item><item><title><![CDATA[My 3 Favorite VS Code Extensions]]></title><description><![CDATA[Hi everyone! I made a video where I shared my top 3 favorite VS Code Extensions and I think you should check them out.]]></description><link>https://giftegwuenu.com/my-3-favorite-vs-code-extensions/</link><guid isPermaLink="true">https://giftegwuenu.com/my-3-favorite-vs-code-extensions/</guid><pubDate>Tue, 21 Jul 2020 09:53:43 GMT</pubDate><content:encoded><![CDATA[Hi everyone! I made a video where I shared my top 3 favorite VS Code Extensions and I think you should check them out.

https://www.youtube.com/embed/4PboVhESamk

The extensions mentioned in the video include:

•  [Git Extension Pack](https://marketplace.visualstudio.com/items?itemName=donjayamanne.git-extension-pack)  
•  [Vetur](https://marketplace.visualstudio.com/items?itemName=octref.vetur)  
•  [Synthwave '84](https://marketplace.visualstudio.com/items?itemName=RobbOwen.synthwave-vscode)

What are some of your favorite extensions and why do you enjoy using them?]]></content:encoded></item><item><title><![CDATA[How to Switch Logo in Dark Mode]]></title><description><![CDATA[I share how I was able to switch the color of my logo in dark mode using CSS custom properties.]]></description><link>https://giftegwuenu.com/how-to-switch-logo-in-dark-mode/</link><guid isPermaLink="true">https://giftegwuenu.com/how-to-switch-logo-in-dark-mode/</guid><pubDate>Fri, 03 Jul 2020 10:52:03 GMT</pubDate><content:encoded><![CDATA[I designed my website with two versions of the logo - one for light mode and another for dark mode. In this article, I'll share how I switched the color of the logo in light/dark mode.

![Light and Dark Logo Grid](/images/uploads/untitled-design.png)

When it came to implementing this design, I was a bit confused about how to go about switching between these two versions when either dark/light mode is selected.

I found a way to do this, and I'll share how I was able to achieve it. I'm open to hearing how you'll typically implement this if you were trying to. [You can reach out on Twitter](https://twitter.com/lauragift_) always open to learning new methods of solving a problem.

Let's dive into it!! So I've got an image tag with the dark-outline logo. It'll serve as the default logo that you see when you're on light mode.

```html
<img class="logo" src="../assets/img/logo.png" alt="original logo" />
```

## Solution: Using CSS Variables

We can use CSS custom properties(CSS Variables) to solve this problem. Here's what I did, I defined a variable in the `variables.scss` called logo for both dark and light mode and set it as the background image, which you'll see in a moment.

```css
body {
  --logo: url(logo.png) no-repeat;

}

body[data-theme="dark"] {
  --logo: url(logo-light.png) no-repeat;
}
```

Then I applied the following style to the `.logo` class on the image. It sets the background image to both versions of the logo depending on which one is selected. The background-size and height properties help position the image directly on top of the original image.

```css
.logo {
  display: block;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  background: var(--logo);
  background-size: 60px;
  height: 80px;
  padding-left: 100px;
}
```

![switching between dark and light mode](/images/uploads/4vw3ldyk9v.gif)

That's it! I now have two different versions of my logo for dark and light mode. If you're interested in seeing the implementation in more detail, the code for my website is open-source, and [you can check it out](https://github.com/lauragift21/giftegwuenu.dev/blob/master/src/components/Nav.vue).]]></content:encoded></item><item><title><![CDATA[Deploy a Gridsome App on Azure Static Web Apps]]></title><description><![CDATA[In this tutorial, We'll go over how to deploy a static website using Azure Static Web Apps.]]></description><link>https://giftegwuenu.com/deploy-a-gridsome-app-on-azure-static-web-apps/</link><guid isPermaLink="true">https://giftegwuenu.com/deploy-a-gridsome-app-on-azure-static-web-apps/</guid><pubDate>Mon, 08 Jun 2020 15:10:12 GMT</pubDate><content:encoded><![CDATA[[Microsoft Build](https://mybuild.microsoft.com/home) happened a few weeks back, among the various exciting news, one of my favorite ones was the newly unveiled [Azure Static Web Apps](https://azure.microsoft.com/en-us/services/app-service/static/). I'm excited to give it a try and show you how to deploy a Gridsome web application. There's already enough tutorials about this why write more? Well, because I couldn't find one with a Gridsome example and I decided to take on the opportunity, there's never enough written tutorials on a subject.

## What is Azure Static Web Apps?

Azure Static Web Apps is a service that automatically builds and deploys full-stack web apps to Azure from a GitHub repository.

![](https://paper-attachments.dropbox.com/s_A01F5AB394E159A5771101449A83AC90C3F879B2DA59BD15747F4E3DA92C5900_1591628792500_static-apps-overview.png)

These are some of the features it ships with out of the box:

* Free web hosting
* Free SSL Certificates
* Authentication Integrations
* Custom Domains
* Globally distributed

Here's a more detailed guide on how [Azure Static Web Apps Works](https://docs.microsoft.com/en-us/azure/static-web-apps/overview).

In this tutorial, We'll go over how to deploy a static website to Azure using the Static Web Apps service. For this example, I have a Gridsome app I'll like to deploy to this service, and I'll walk through how to set up and deploy my app.

## Prerequisites

To follow this guide, you need to have basic knowledge of Vue.js, have an Azure account, Node.js installed, and a GitHub account handy.

## Step 1:

Install Gridsome CLI tool:

```bash
npm install --global @gridsome/cli
```

## Step 2:

I’m using a starter project I created to get things moving fast here. Go ahead and run the command to create a new Gridsome project.

```
gridsome create my-blog https://github.com/lauragift21/gridsome-minimal-blog
```

Now run your app locally with the command.

```bash
npm run develop
```

![screenshot of gridsome blog](https://paper-attachments.dropbox.com/s_A01F5AB394E159A5771101449A83AC90C3F879B2DA59BD15747F4E3DA92C5900_1590433661331_Screenshot+2020-05-25+at+8.07.25+PM.png)

## Step 3:

We have our [Gridsome](http://www.gridsome.org) application up and running, Let's push the app to GitHub we'll do so using the following commands:

```bash
git add.

git commit -m 'my new gridsome blog'
```

Next, create a repository on [GitHub](https://github.com/new) called my-fancy-blog or use any fancy name you want and run the following commands:

```bash
git remote add origin git@github.com:<YOUR-USER-NAME>/my-fancy-blog.git`

git push -u origin master
```

We've now added our application to GitHub successfully. Let's move on to the last step.

## Step 4:

This is where we deploy the web app on Azure Static Web Apps.

You need to have an active Azure account to follow these next steps.

* Login to your Azure account and navigate to Azure Portal
* Click on create a resource

![setting up azure static web apps](https://paper-attachments.dropbox.com/s_A01F5AB394E159A5771101449A83AC90C3F879B2DA59BD15747F4E3DA92C5900_1590606779748_Screenshot+2020-05-27+at+7.57.18+PM.png)

* Search for Static Web Apps and click create

![setting up azure static web apps](https://paper-attachments.dropbox.com/s_A01F5AB394E159A5771101449A83AC90C3F879B2DA59BD15747F4E3DA92C5900_1590607743578_Screenshot+2020-05-27+at+7.57.42+PM.png)

* Next, pick a subscription from the dropdown and pick a resource group in my case, I selected the default subscription and created a new resource group.
* Give your app a name and choose a region that’s closest to you.
* Click on the sign in with the GitHub button. It'll enable you to connect your repository to Azure Static Web Apps.

![setting up azure static web apps](https://paper-attachments.dropbox.com/s_A01F5AB394E159A5771101449A83AC90C3F879B2DA59BD15747F4E3DA92C5900_1590606908511_Screenshot+2020-05-27+at+8.05.59+PM.png)

* Once you have GitHub connected, you can choose your GitHub repository and choose the branch you want to deploy.

![setting up azure static web apps](https://paper-attachments.dropbox.com/s_A01F5AB394E159A5771101449A83AC90C3F879B2DA59BD15747F4E3DA92C5900_1590607195497_Screenshot+2020-05-27+at+8.11.08+PM.png)

* Specify a folder location to store static output in my case I’m using the `dist` directory.

![setting up azure static web apps](https://paper-attachments.dropbox.com/s_A01F5AB394E159A5771101449A83AC90C3F879B2DA59BD15747F4E3DA92C5900_1590607248709_Screenshot+2020-05-27+at+8.11.27+PM.png)

Azure sets up a default `npm run build` in my GitHub actions workflow which can be customized to a different command. In my case, I didn't need to set that up since it's the default command.

In the last step, we can review our configuration to make sure we have everything set up correctly and click create to get the app deployed.



![setting up azure static web apps](https://paper-attachments.dropbox.com/s_A01F5AB394E159A5771101449A83AC90C3F879B2DA59BD15747F4E3DA92C5900_1590607481589_Screenshot+2020-05-27+at+8.21.58+PM.png)

That's it! You'll get redirected to a page showing your app deployment is ongoing.

![setting up azure static web apps](https://paper-attachments.dropbox.com/s_A01F5AB394E159A5771101449A83AC90C3F879B2DA59BD15747F4E3DA92C5900_1590607486946_Screenshot+2020-05-27+at+8.22.27+PM.png)

![setting up azure static web apps](https://paper-attachments.dropbox.com/s_A01F5AB394E159A5771101449A83AC90C3F879B2DA59BD15747F4E3DA92C5900_1590607491471_Screenshot+2020-05-27+at+8.23.23+PM.png)

* To check how things are working under the hood, Log on to GitHub and check the actions tab on your repo.

![setting up azure static web apps](https://paper-attachments.dropbox.com/s_A01F5AB394E159A5771101449A83AC90C3F879B2DA59BD15747F4E3DA92C5900_1590607496804_Screenshot+2020-05-27+at+8.23.33+PM.png)

You should see the actions running, and when that ends, your app should be live. Check back on the Azure portal you should see a browse button by clicking on it will take you to your deployed app🎉

![Deployed version of the blog](https://paper-attachments.dropbox.com/s_A01F5AB394E159A5771101449A83AC90C3F879B2DA59BD15747F4E3DA92C5900_1590607535650_Screenshot+2020-05-27+at+8.25.26+PM.png)

## Conclusion

That was fun! I'm quite impressed with how straightforward it was to get this working. In just a few clicks, I deployed version of my site. If you're interested in learning more about how to deploy another kind of application, The Azure team has a [well-documented guide](https://docs.microsoft.com/en-us/azure/static-web-apps/) on how to do that. I hope this was helpful as much I enjoyed writing and trying out Azure Static Web Apps.]]></content:encoded></item><item><title><![CDATA[5 Soft Skills Every Software Developer Should Learn]]></title><description><![CDATA[Hello People! Let's move away from core technical things for a bit. In this video, I share soft skills that I feel every developer should learn and improve.]]></description><link>https://giftegwuenu.com/5-soft-skills-every-software-developer-should-learn/</link><guid isPermaLink="true">https://giftegwuenu.com/5-soft-skills-every-software-developer-should-learn/</guid><pubDate>Fri, 01 May 2020 08:16:46 GMT</pubDate><content:encoded><![CDATA[	
Hello People! Let's move away from core technical things for a bit. In this video, I share soft skills that I feel every developer should learn and improve.	


https://www.youtube.com/embed/b4b_z6gFmlY

<br>

The norm that technical skills are important than the core soft skills does not hold true in the industry today. We all have to balance both to stay relevant in the industry.	

I learned a lot from [Pluralsight](https://www.pluralsight.com/) this month already and I decided to learn a bit more about soft skills. Here are some courses that I really enjoyed taking.	

[Developing a Killer Personal Brand - Jason Alba](https://www.pluralsight.com/courses/developing-killer-personal-brand)	

[The Art of Speaking: Scott Hanselman](https://www.pluralsight.com/courses/hanselman-speaking)	

[How to Be a Great Mentor: Get More out of Mentoring - Jason Alba](https://www.pluralsight.com/courses/how-to-be-great-mentor)	

Enjoy the video :)]]></content:encoded></item><item><title><![CDATA[Let's Learn Data Visualization with D3.js]]></title><description><![CDATA[I started a challenge to learn a new technology using Pluralsight FreeApril. In this video, I get into data visualization with D3.js]]></description><link>https://giftegwuenu.com/let-s-learn-data-visualization-with-d3-js/</link><guid isPermaLink="true">https://giftegwuenu.com/let-s-learn-data-visualization-with-d3-js/</guid><pubDate>Tue, 21 Apr 2020 12:38:18 GMT</pubDate><content:encoded><![CDATA[My goal with this video was to build out a scatterplot chart using D3.js and a dataset I found on Kaggle. I had no previous experience with D3.js so I think this was a great way of learning and getting starting with data viz! It was a great ride if you ask me.

https://www.youtube.com/embed/AAvf2rak-js

PS: I'm thinking of doing more streams on my channel do you think it is a great idea?]]></content:encoded></item><item><title><![CDATA[Joining the Frictionless Data Team]]></title><description><![CDATA[I'm super excited to share I joined Datopian as a Frontend Developer and Developer Evangelist! 🎉]]></description><link>https://giftegwuenu.com/joining-the-frictionless-data-team/</link><guid isPermaLink="true">https://giftegwuenu.com/joining-the-frictionless-data-team/</guid><pubDate>Fri, 20 Mar 2020 07:30:07 GMT</pubDate><content:encoded><![CDATA[Hi there, I'm super excited to share I joined [Datopian](https://datopian.com/) as a Frontend Developer and Developer Evangelist! 🎉

[Frictionless Data](https://frictionlessdata.io) is an open-source toolkit that brings simplicity and grace to the data experience. We want every Data Engineer or Data Scientist to know about it and benefit from it.

Part of my job involves spreading the word about Frictionless Data and encouraging community involvement by sharing what you can achieve with the toolkit 😃

My other day-to-day activities include the following and more:

* Working on Frictionless Data tools
* Working closely and interacting with the Frictionless Data Community via (chats, remote hangouts, and in-person events)
* Writing documentation, guide and blog posts for Frictionless Data

I'm glad I get to do this as a full-time job because a part of my passion is teaching and learning 🚀 and I'm excited to be a part of the [Frictionless Data community](https://frictionlessdata.io/) where I get to contribute, share, learn and interact with the data community.]]></content:encoded></item><item><title><![CDATA[Improve Video Accessibility with Captions ]]></title><description><![CDATA[In this article, I'll show you how to auto-generate captions for any video content using Cloudinary.]]></description><link>https://giftegwuenu.com/improve-video-accessibility-with-captions/</link><guid isPermaLink="true">https://giftegwuenu.com/improve-video-accessibility-with-captions/</guid><pubDate>Fri, 06 Mar 2020 07:41:22 GMT</pubDate><content:encoded><![CDATA[Have you ever come across a video on a streaming website where the captions are so good that you read those instead of listening to the audio probably because you are in a noisy environment or you just want some quite? I can personally say I do this sometimes but the truth is, not so many streaming services provide this feature and what's even more important is to consider those without the ability to hear they rely on the captions to understand what is happening in the video which makes sure every video content is accessible to all users. In this article, I'll show you how to autogenerate captions for any video content using [Cloudinary](https://cloudinary.com/).

For our demo, I have a video of me without captions and we'll walk through how to generate a caption for the video. Here's a demo on codepen

```html
<video autoplay muted controls width="700">
  <source src="gift.mp4" type="video/mp4">
  
  <source src="gift.webm" type="video/webm">

  <p>Your browser doesn't support HTML5 video. Here is
     a <a href="gift.mp4">link to the video</a> instead.
  </p>
</video>
```

https://codepen.io/lauragift21/pen/zYGZrmr?tabs=result?height=600

I have the video muted by default and without captions, you can't really tell what I am saying until you unmute it which is one step away and could turn users away in some cases. 

HTML video supports adding captions to your video with the [`<track>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track) tag. Let's say you already have a caption file for the video above you can add it to the video by including the file with the track tag.

```html
<track default kind="captions" srclang="en" src="gift.vtt" />
```

The attribute `default` indicates the captions should be shown by default, `kind` indicates the purpose of the text shown i.e captions or subtitles and `srclang` indicate the language used and lastly `src` is the location of the text file.

You can manually generate the captions by hand or have a web service do that automatically for you. We'll be using [Cloudinary](https://cloudinary.com/) add-ons to achieve this.

## Adding Captions with Cloudinary

[Cloudinary](https://cloudinary.com) is a cloud-based service that provides an end-to-end image and video management solution including uploads, storage, manipulations, optimizations, and delivery. An added benefit of using Cloudinary as a  media solution is you also get the [Add-ons](https://cloudinary.com/addons) feature which enables you to enhance your images and videos using functionalities offered by Cloudinary's vision and image processing partners.

![A list of Cloudinary Addons](https://dev-to-uploads.s3.amazonaws.com/i/yh6h6g9ctfug4nyyvvz1.png)

We are lucky because two different add-ons from the list can be used to accomplish what we are trying to solve.[Microsoft Azure Video Indexer](https://cloudinary.com/documentation/microsoft_azure_video_indexer_addon) and [Google AI Video Transcription](https://cloudinary.com/documentation/google_ai_video_transcription_addon). Now let's see how to get these services to work.

The first step to take is to upload the video to Cloudinary using the [Media Upload API](https://cloudinary.com/documentation/image_video_and_file_upload#image_and_video_upload_api). Cloudinary allows you to upload media to the cloud and perform transformations through the browser or using server-side code for this tutorial we'll go with the latter.

Let's use [Cloudinary Node.js SDK](https://cloudinary.com/documentation/node_integration) to upload the video. To get started, we need to install:

```bash
  yarn add cloudinary dotenv
```

Next, [sign up for an account if you don't already have one](https://cloudinary.com/signup) or login to the dashboard to get your account details.

Create a new file `index.js` and import these packages 

```js
require('dotenv').config();
var cloudinary = require('cloudinary').v2;
```

Create a `.env` file and set your env variables with details from the dashboard

```js
cloudinary.config({
  cloud_name: process.env.cloud_name,
  api_key: process.env.api_key,
  api_secret: process.env.api_secret
});
```

Now to perform the upload action, the Cloudinary `upload` method sends an authenticated upload API call over HTTPS while sending the video file:

```js
cloudinary.uploader.upload('gift.mp4', {
  resource_type: "video",
  public_id: "gift",
}, function(error, result) {
  console.log(result, error)
})
```

The code block above will upload the video to the cloud but before doing that we should first enable captions on the video. By including a `raw_convert` parameter with a value '', this tells cloudinary to generate a caption for the video. I mentioned we have two add-ons option earlier this is how you can use either of them in your code.

```js
raw_convert: 'azure_video_indexer'
raw_convert: 'google_speech'
```

```js
cloudinary.uploader.upload('gift.mp4', {
  resource_type: "video",
  public_id: "gift",
  raw_convert: 'azure_video_indexer' // raw_convert: 'google_speech'

}, function(error, result) {
  console.log(result, error)
})
```

Also, you can request transcription/captions in the different languages and (optionally) region/dialect. 

```js
 raw_convert: "azure_video_indexer:fr-FR"
 raw_convert: "google_speech:de-DE"
```

A full list of supported languages and region codes is available on [Google Cloud speech-to-text language support](https://cloud.google.com/speech-to-text/docs/languages)

Uploading is performed synchronously, and once finished, the uploaded video is immediately available for manipulation and delivery.

![Media Dashboard](https://dev-to-uploads.s3.amazonaws.com/i/5lo4ufsyru2a1u1j7zqe.png)

Cloudinary delivers the caption in three different formats by default `.srt`, `.vvt` and `.transcript` but you can always specify the one you want by appending the format on the `raw_convert` parameter.

```js
  raw_convert: "azure_video_indexer:srt:vtt"
  raw_convert: "google_speech:srt:vtt"
```

Now, let's use the captions generated with our video.

```html
<video crossorigin autoplay muted controls width="100%">
  <source src="https://res.cloudinary.com/lauragift/video/upload/v1582792249/gift.mp4" type="video/mp4">
  
  <source src="https://res.cloudinary.com/lauragift/video/upload/v1582792249/gift.webm" type="video/webm">
  
  <track kind="captions" srclang="en" src="https://res.cloudinary.com/lauragift/raw/upload/v1582792283/gift.mp4.en-US.azure.vtt" default>
  
  <p>Your browser doesn't support HTML5 video. Here is
     a <a href="https://res.cloudinary.com/lauragift/video/upload/v1582792249/gift.mp4">link to the video</a> instead.
  </p>
</video>
```

https://codepen.io/lauragift21/pen/KKpWOLY?tabs=result?height=600

This is a helpful approach in making sure your video content is accessible but always remember that no speech recognition tool is 100% accurate. If exact accuracy is important for your video, you can download the generated `.transcript`, `.srt` or `.vtt` file, edit them manually and overwrite the original files.

## Conclusion

Accessibility shouldn't be an afterthought and as we make more effort in delivering more accessible websites to our users we can pay close attention to media on the web. Going the extra mile to make sure that image or video is accessible to everyone will go a long way in creating a friendly and accessible web for everyone.

## Resources

[Cloudinary Upload Demo](https://github.com/cloudinary/cloudinary_npm/blob/master/samples/basic/basic.js)

[Google AI Video Transcription Docs](https://cloudinary.com/documentation/google_ai_video_transcription_addon)

[Microsoft Azure Video IndexerDocs](https://cloudinary.com/documentation/microsoft_azure_video_indexer_addon)

[GitHub Repo](https://github.com/lauragift21/media-a11y-cloudinary)]]></content:encoded></item><item><title><![CDATA[How To Build A Plugin With Gridsome]]></title><description><![CDATA[I wrote an article for ButterCMS on how to build a gridsome source plugin using ButterCMS as a source.]]></description><link>https://giftegwuenu.com/how-to-build-a-plugin-with-gridsome/</link><guid isPermaLink="true">https://giftegwuenu.com/how-to-build-a-plugin-with-gridsome/</guid><pubDate>Mon, 24 Feb 2020 17:06:02 GMT</pubDate><content:encoded><![CDATA[I wrote an article for [ButterCMS](https://buttercms.com/) on how to build a gridsome source plugin using ButterCMS as a source.

Enjoy and I hope you find it helpful!

[How To Build A Plugin With Gridsome
](https://buttercms.com/blog/how-to-build-a-plugin-with-gridsome)

![banner](https://cdn.buttercms.com/hZngBnq5Qw22V2bcubcQ)
]]></content:encoded></item><item><title><![CDATA[What’s a Headless CMS and Why Should You Care?]]></title><description><![CDATA[In this post, I cover what a headless CMS is and share some benefits and use cases of using the headless content management system.]]></description><link>https://giftegwuenu.com/what-s-a-headless-cms-and-why-should-you-care/</link><guid isPermaLink="true">https://giftegwuenu.com/what-s-a-headless-cms-and-why-should-you-care/</guid><pubDate>Tue, 18 Feb 2020 09:26:35 GMT</pubDate><content:encoded><![CDATA[I wrote an article for [Stackbit](https://www.stackbit.com) Blog on - What’s a Headless CMS and Why Should You Care? Enjoy and I hope you find it helpful!


[What’s a Headless CMS and Why Should You Care?](https://www.stackbit.com/blog/what-is-a-headless-cms/)



![blog banner](https://www.datocms-assets.com/13491/1581601683-whatsaheadlesscms.png)
]]></content:encoded></item><item><title><![CDATA[Applying CSS :focus-within]]></title><description><![CDATA[Let's learn what the :focus-within pseudo-class is and how to apply it.]]></description><link>https://giftegwuenu.com/applying-css-focus-within/</link><guid isPermaLink="true">https://giftegwuenu.com/applying-css-focus-within/</guid><pubDate>Thu, 13 Feb 2020 12:26:34 GMT</pubDate><content:encoded><![CDATA[In my quest to learn something new every week. I came across a not so new pseudo-class element [:focus-within](https://drafts.csswg.org/selectors-4/#the-focus-within-pseudo). Let's take a look at how it works and how to apply it to our styles.

The `:focus-within` pseudo-class represents an element that is paired with the `:focus` pseudo-class or has a descendant that is matched by `:focus`.

> NB: the focus here means when you click, tap or tab through an element such as a form input or a link.

I like how [Chris Coyier](https://css-tricks.com/almanac/selectors/f/focus-within/) explains it in simple terms:

> It selects an element if that element contains any children that have `:focus`.

## How is this different from `:focus`?

The `:focus` pseudo-element works differently, an element receives focus when the `:focus` element is applied to it, but, in a case when you have a collection of child elements it is not common to use `:focus` pseudo-class to select the parent element. The `:focus` pseudo-class applies only to the focused element itself.

https://codepen.io/lauragift21/pen/VwLLggX?tabs=result,css


This is what `:focus-within` is able to solve. We can use `:focus-within `pseudo-class if we want to select an element that contains a focused element or elements that has descendants matched by `:focus`. Let's see how to achieve that.

## Applying :focus-within

`:focus-within` is useful for different use-cases. You can think of using it:

* To highlight an entire form when one of its input fields is in focus.
* Highlight rows of a table and change the background color when a user clicks on it.

Here's an example, for highlighting an entire `<form>` container when the user focuses on one of its `<input>` fields.

https://codepen.io/lauragift21/pen/gOppEVP?tabs=result,css

## Browser Support

As of 2020, This CSS feature is widely supported only IE browsers don't have support yet. Here's a table of current browser that fully supports `:focus-within`.

![Can I use](https://dev-to-uploads.s3.amazonaws.com/i/nu2usvsjsm47xyraenqe.png)

## Final Thoughts

The `:focus-within` element is an accessibility win for developers and users on the web. We should always keep it in mind while coding it's way better to reach for this than use JavaScript to accomplish the same task. 

## Resources

[CSS Focus Within Spec](https://drafts.csswg.org/selectors-4/#the-focus-within-pseudo)

[MDN Docs](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-within) [](https://css-tricks.com/almanac/selectors/f/focus-within/)

[CSS Tricks :focus-within](https://css-tricks.com/almanac/selectors/f/focus-within/)
]]></content:encoded></item><item><title><![CDATA[TIL: CSS Media Queries]]></title><description><![CDATA[In this article, I'll share some media features I previously didn't know about and hope you learn and share them too.]]></description><link>https://giftegwuenu.com/til-css-media-queries/</link><guid isPermaLink="true">https://giftegwuenu.com/til-css-media-queries/</guid><pubDate>Fri, 07 Feb 2020 13:34:35 GMT</pubDate><content:encoded><![CDATA[I have been working on the web for a few years now but I haven't paid any attention to the [W3C standards](https://www.w3.org/) or visited the website to see where all the magic on the web happens. Well, a few days ago I stumbled on [Rachel Andrew's smashing article celebrating the W3C at 25](https://www.smashingmagazine.com/2019/10/happy-birthday-w3c/) and one thing led to another I landed on the CSS working group page several clicks down the line and I'm lost and amazed at what I had no idea existed. The web is an open platform and there are a lot of amazing people working together to build and manage the web standards we all work with from accessibility, CSS, JavaScript and a lot more. Why I'm saying all of this is because from my crazy search I learned something new and I'll like to share with others.

> 💡`TIL - Today I Learned`

Now we've come across the `@media` CSS rule but did you know that they are cool things you can do with it asides making your website responsive? The [syntax of a media query](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) is composed of an optional media type(such as print or screen) and any number of media feature expressions. In this article, I'll share some media features I previously didn't know about and hope you learn and share them too.

> NB: Some of the features I'll share are part of the CSS Working Group Draft and are not finalized yet. The features are part of the Media Queries Level 5 specifications and should be used 

* **Prefers-Color-Scheme**: The prefers-color-scheme CSS media feature is used to detect if the user has requested the system to use a light or dark color theme. This is very useful for aesthetics and accessibility purposes and a lot of developers now adopt the dark mode feature, most websites I have visited lately have the dark mode feature implemented mine included. This media feature can be implemented with these modes: 
* **no-preference:** Indicates that the user has made no preference known to the system. This keyword value evaluates as false in the boolean context.
* **light:** Indicates that the user has notified the system that they prefer an interface that has a light theme.
* **dark:** Indicates that the user has notified the system that they prefer an interface that has a dark theme.

Here's a short demo of how this feature works.

https://codepen.io/lauragift21/pen/ZEGYzXB?tabs=result,css

This feature was added in [Media Queries Level 5 spec](https://drafts.csswg.org/mediaqueries-5/#prefers-color-scheme) and is supported by major browsers you can try this out right now by switching the default theme of your device. The [can I use embed](https://caniuse.com/) give a detailed view of browsers that are fully supported.

![Can I Use Image](https://dev-to-uploads.s3.amazonaws.com/i/lwhsv1gesnswh0g1868v.png)

* **Prefers-Reduced-Motion:** The prefers-reduced-motion CSS media feature is used to detect if the user has requested that the system minimize the amount of animation or motion it uses. This feature is super important for people with the [vestibular disorder](https://vestibular.org/understanding-vestibular-disorder) or motion sickness this can be uncomfortable for them visiting a website with a lot of animation and motion so this feature is a great way to minimize or turn motion off. Luckily, Operating systems like Android, iOS, macOS, or Windows in their accessibility settings have allowed users for a long time to reduce motion wherever possible.

![MacOS settings](https://dev-to-uploads.s3.amazonaws.com/i/vlr74psyz92nza7araxq.png)

This media feature can be implemented with these modes: 

* **no-preference**: Indicates that the user has made no preference known to the system.
* **reduce**: Indicates that the user has notified the system that they prefer an interface that minimizes the amount of movement or animation, preferably to the point where all non-essential movement is removed. 

Here's a demo of how this feature works. The box will remain animated unless you switch the reduce motion option on let's try doing that by checking the accessibility settings on your device you'll immediately notice the animation is turned off.

https://codepen.io/lauragift21/pen/WNvbNGR?tabs=result,css

Added in [Media Queries Level 5 spec](https://drafts.csswg.org/mediaqueries-5/#prefers-reduced-motion) and is supported by major browsers you can try this out right now by switching the default theme of your device. The [can I use embed](https://caniuse.com/) give a detailed view of browsers that are fully supported.

![Prefers Reduced Motion embed](https://dev-to-uploads.s3.amazonaws.com/i/pfnjmi9npnwd5s94liz3.png)

* **Prefers-Contrast:** The prefers-contrast CSS media feature is used to detect if the user has requested that the web content is presented with a higher (or lower) contrast. 

> This feature is still experimental and it's currently in the process of being added to the web platform.

The media feature can be implemented with these modes: 

* **no-preference**: Indicates that the user has made no preference known to the system. This keyword value evaluates as false in the boolean context.
* **low**: Indicates that the user has notified the system that they prefer an interface that has a lower level of contrast.
* **high**: Indicates that the user has notified the system that they prefer an interface that has a higher level of contrast.

> Note: No browser currently implements this feature so I can't show an example of how it works but I look forward to seeing this feature ship.

**Prefers-Reduced-Transparency:** The prefers-reduced-transparency CSS media feature is used to detect if the user has requested that the system minimize the amount of transparency used across elements.

> This feature is still experimental and it's currently in the process of being added to the web platform.

The media feature can be implemented with these modes: 

* **no-preference:** Indicates that the user has made no preference known to the system. This keyword value evaluates as false in the boolean context.
* **reduce:** Indicates that the user has notified the system that they prefer an interface that minimizes the amount of transparent or translucent layer effects. 

> Note: No browser currently implements this feature so I can't show an example of how it works but I look forward to seeing this feature ship.

**Prefers-Reduced-Data:** The prefers-reduced-data media feature is used to detect if the user has a preference for being served alternate content that uses less data for the page to be rendered.

The media feature can be implemented with these modes: 

* **no-preference:** Indicates that the user has made no preference known to the system. This keyword value evaluates as false in the boolean context. 
* **reduce:** Indicates that the user has expressed the preference for lightweight alternate content.  

> Note: No browser currently implements this feature but here's an example of how it works from Adam Argyle tweet.

https://twitter.com/argyleink/status/1225240181822742529

## Conclusion

I'm excited about these additional media features and can't wait to start using them in my web projects. Like I mentioned earlier a few of them are still in the working draft for [Media Queries Level 5](https://drafts.csswg.org/mediaqueries-5/) and there's no browser support for now. But 2020 is the year more capability grows on the web and I'm here to experience all of it. Share your thoughts on these if you have used it or have any thoughts on this specification.

## Resources

https://drafts.csswg.org/mediaqueries-5 

https://web.dev/prefers-color-scheme 

https://a11y-101.com/development/reduced-motion

https://developers.google.com/web/updates/2019/03/prefers-reduced-motion
]]></content:encoded></item><item><title><![CDATA[Learning In Public]]></title><description><![CDATA[I share my thoughts on Learning In Public and why I have decided to embark on this journey with areas I'm looking forward to improve on.]]></description><link>https://giftegwuenu.com/learning-in-public/</link><guid isPermaLink="true">https://giftegwuenu.com/learning-in-public/</guid><pubDate>Wed, 29 Jan 2020 08:37:36 GMT</pubDate><content:encoded><![CDATA[In this video, I share my thoughts on the topic Learning In Public and why I have decided to embark on that journey with areas I'm looking forward to improving in my career. 

https://www.youtube.com/embed/8VGoj8mrMnY

## Resources

* https://www.swyx.io/writing/learn-in-public/
* https://www.swyx.io/writing/learn-in-public-hack/
* https://kentcdodds.com/blog/intentional-career-building
]]></content:encoded></item><item><title><![CDATA[ Let's Build and Deploy a Website With Stackbit ]]></title><description><![CDATA[Stackbit makes building and maintaining modern websites easy. In this video, we'll take a look at how to get a website from zero to deploy using Stackbit.]]></description><link>https://giftegwuenu.com/let-s-build-and-deploy-a-website-with-stackbit/</link><guid isPermaLink="true">https://giftegwuenu.com/let-s-build-and-deploy-a-website-with-stackbit/</guid><pubDate>Thu, 23 Jan 2020 11:27:21 GMT</pubDate><content:encoded><![CDATA[Stackbit makes building and maintaining modern websites easy. In this video, we'll take a look at how to get a website from zero to deploy using Stackbit.

https://www.youtube.com/embed/HQlRmpT6D-8
]]></content:encoded></item><item><title><![CDATA[Extending JAMstack: 10 APIs and Tools to check out in 2020]]></title><description><![CDATA[The ongoing conversation about JAMstack has moved from being just a stack for creating static sites to a stack for developing dynamic web applications. Let’s take a look at an extensive list of APIs and tools you can leverage.]]></description><link>https://giftegwuenu.com/extending-ja-mstack-10-ap-is-and-tools-to-check-out-in-2020/</link><guid isPermaLink="true">https://giftegwuenu.com/extending-ja-mstack-10-ap-is-and-tools-to-check-out-in-2020/</guid><pubDate>Mon, 13 Jan 2020 13:05:23 GMT</pubDate><content:encoded><![CDATA[I wrote an article for [Stackbit](https://www.stackbit.com) Blog on Extending JAMstack: 10 APIs and Tools to check out in 2020.
Enjoy and I hope you find it helpful!

[Extending JAMstack: 10 APIs and Tools to check out in 2020](https://www.stackbit.com/blog/extending-jamestack-2020/)

![Extending JAMstack: 10 APIs and Tools to check out in 2020](https://www.datocms-assets.com/13491/1578919946-10apistocheckout.png)
]]></content:encoded></item><item><title><![CDATA[Getting Started with Nuxt.js ]]></title><description><![CDATA[ In this article, we'll be taking a look at Nuxt framework, and will discuss how to set it up on an Alibaba Cloud ECS server. ]]></description><link>https://giftegwuenu.com/getting-started-with-nuxt-js/</link><guid isPermaLink="true">https://giftegwuenu.com/getting-started-with-nuxt-js/</guid><pubDate>Tue, 07 Jan 2020 14:17:40 GMT</pubDate><content:encoded><![CDATA[## Introduction

[Nuxt.js](https://nuxtjs.org/) is a universal framework for creating Vue.js applications. The goal behind having a universal framework is so that it is flexible enough to be used as both a server-side rendered app, a static generated site or a single page application.  Nuxt.js main focus is on the UI Rendering aspect of development while abstracting away the client/server distribution. In this article, We'll be taking a look at Nuxt framework, how to set it up and also how it is structured in building Vue powered applications.

## Why Use Nuxt?

Nuxt.js comes bundled with features that are hard to miss and all these features are available out of the box for you to utilize in building web applications. Some of these features include:

* Automatic Code Splitting
* Vue Powered
* Static File Rendering
* Hot Module Replacement
* Pre-processors: Sass, Stylus, Less
* Server-Side Rendering
* HTTP/2 Support

## Scaffolding a Nuxt App

Nuxt.js is really easy to get started with. The Nuxt team has created a scaffolding tool that will enable you to create a nuxt app in seconds called `create-nuxt-app`. You can either use `npx` or `yarn` to create a Nuxt project with the following commands. 

```bash
npx create-nuxt-app <project-name> or 
yarn create nuxt-app <project-name>
```

![Scaffolding a project with nuxt](https://paper-attachments.dropbox.com/s_BDD8AA2B53B55AB1F1B87CE74B7807DCCD281A9D9FD24A74BA7C2D19CE99E369_1558346041007_O0DsGKXuS5.gif)

The options available when using the `create-nuxt-app` command is diverse, you can either choose between having an integrated server-side frameworks, UI frameworks, testing frameworks and other tools needed like PWA and linting and it’ll be automatically generated and setup for you. But for this tutorial, we’ll be doing the bare minimum so I opted out of some of the features.

## Run the Project

Once the dependencies are installed, the command available to run the project is the following command:

```
    yarn run dev
```

There are other commands available to either build the app, lint the entire project or generate a static site using the `generate` script.

![Scripts in Package.json](https://paper-attachments.dropbox.com/s_BDD8AA2B53B55AB1F1B87CE74B7807DCCD281A9D9FD24A74BA7C2D19CE99E369_1558346591401_Screen+Shot+2019-05-20+at+11.01.15+AM.png)

After running the command to start the app, If we navigate to  [http://localhost:3000](localhost:3000), you should now be able to see our application running on the screen like the one below.

![](https://paper-attachments.dropbox.com/s_BDD8AA2B53B55AB1F1B87CE74B7807DCCD281A9D9FD24A74BA7C2D19CE99E369_1558367809325_Screen+Shot+2019-05-20+at+4.56.09+PM.png)

## Folder Structure

The folder structure for a nuxt app comprises of the following files and folder directory and we’ll be taking a look at each one of them to determine what they represent.

![Nuxt Project Directory](https://paper-attachments.dropbox.com/s_BDD8AA2B53B55AB1F1B87CE74B7807DCCD281A9D9FD24A74BA7C2D19CE99E369_1558347667261_Screen+Shot+2019-05-20+at+11.01.26+AM.png)

**Assets:** The files contained in this folder consists of assets such as images, fonts, and stylesheets that will be used in the Nuxt app.

**Components:** The `components` directory consists of reusable Vue.js components that will be used in building the application such as (Input, Button, and Card), etc.

**Layouts:** The `layouts` directory includes your application layouts. Layouts are used to change the look and feel of your page (for example by including a homepage). The `layouts` directory defines all of the various layouts that your application can use. This is a great place to add common global components that are used across your app like the header and footer. You should include components in this file that you don’t want to redefine for each new page over and over again.

**Middleware:** The `middleware` directory contains your application middleware. Middleware lets you define custom functions that can be run before rendering either a page or a group of pages.

**Pages:** The `pages` directory contains your application views and routes. The framework reads all the `.vue` files inside this directory and creates the application router. For example if you have an `index.vue` that will become the `/` route and `about.vue` will become `/about` route.

**Plugins:** The `plugins` directory contains your Javascript plugins that you want to run before instantiating the root Vue.js Application. This is the place to register components globally and to inject functions or constants.

**Static:** The `static` directory is similar to `assets` but it is directly mapped to the server root (`/static/robots.txt` is accessible under `http://localhost:3000/robots.txt`) and contains files that likely won't be changed (i.e. the favicon).

**Store:** The `store` directory houses your [Vuex Store](http://vuex.vuejs.org/en/) files. The Vuex Store comes with Nuxt.js out of the box but is disabled by default. Creating an `index.js` file in this directory enables the store.

**nuxt.config.js:** This file contains Nuxt.js custom configurations. Note that the file cannot be renamed without extra configurations.

**package.json:** This file is where all dependencies and scripts lives and the file cannot be renamed.

## Routing

The way routing works with Nuxt.js is it automatically generates the [vue-router](https://github.com/vuejs/vue-router) configuration based on your file tree of `.vue` files inside the `pages` directory. It looks at the structure and automatically generates the route configurations based off that structure. Nuxt and vue-router do all the work under the hood. An example of such structure is the following, the file tree will look exactly like the structure below

```
    pages/
    --|index.vue
    --|product.vue
     --|index.vue
     --|one.vue 
```

and that will generate routes like the following:

```
router: {
      routes: [
        {
          name: 'index',
          path: '/',
          component: 'pages/index.vue'
        },
        {
          name: 'product',
          path: '/product',
          component: 'pages/product/index.vue'
        },
        {
          name: 'product-one',
          path: '/product/one',
          component: 'pages/product/one.vue'
        }
      ]
    }
```

## Dynamic Routes

You might be wondering how this will work in cases when we are dealing with dynamic routes. In order to define a dynamic route with a parameter, you need to define a `.vue` file OR a directory **prefixed by an underscore,** let’s take a look at an example. 

```
  pages/
    --| _slug/
    -----| comments.vue
    -----| index.vue
    --| users/
    -----| _id.vue
    --| index.vue
```

and that will generate the following routes:

```
router: {
      routes: [
        {
          name: 'index',
          path: '/',
          component: 'pages/index.vue'
        },
        {
          name: 'users-id',
          path: '/users/:id?',
          component: 'pages/users/_id.vue'
        },
        {
          name: 'slug',
          path: '/:slug',
          component: 'pages/_slug/index.vue'
        },
        {
          name: 'slug-comments',
          path: '/:slug/comments',
          component: 'pages/_slug/comments.vue'
        }
      ]
    }
```

## Nested Routes

Nuxt.js lets you create a nested route by using the children routes of vue-router. To define the parent component of a nested route, you need to create a Vue file with the **same name as the directory** which contains your children views.

```
pages/
    --| products/
    -----| _id.vue
    -----| index.vue
    --| products.vue
```

will become:

```
router: {
      routes: [
        {
          path: '/products',
          component: 'pages/products.vue',
          children: [
            {
              path: '',
              component: 'pages/products/index.vue',
              name: 'products'
            },
            {
              path: ':id',
              component: 'pages/products/_id.vue',
              name: 'products-id'
            }
          ]
        }
      ]
    }
```

When navigating between pages, Nuxt recommends we use `nuxt-link` component that is built in as opposed to using `router-link` that is used by vue-router.

## Deploying A Nuxt.js App

Nuxt.js comes with a set of useful commands, both for development and production purpose. We will have a look at all the scripts used in running a nuxt app and delve dipper into the script for deploying a Nuxt app.

| Command  | Description                                                                               |
| -------- | ----------------------------------------------------------------------------------------- |
| dev      | Launch a development server on localhost:3000 with hot-reloading.                         |
| build    | Build your application with webpack and minify the JS & CSS (for production).             |
| start    | Start the server in production mode (after running `nuxt build`).                         |
| generate | Build the application and generate every route as an HTML file (used for static hosting). |

The commands outlined above are scripts we can run using either `yarn`  or `npm` on the terminal. For production, we’ll need to deploy the application. Nuxt.js lets you choose between three modes to deploy your application: Server-Side Rendering, Static Generated, or Single Page Applications. Depending on your choice for deployment the following are ways you can build your Nuxt application for production.

**Server Rendering** To run your application, you will need to run the command below:

```
    $ yarn build or npm run build
```

**Static Generated** To generate our application into static files, we would have to run the command below:

```
    $ yarn generate or npm run generate
```

**Single Page Applications** SPA’s in Nuxt can be generated using two modes:

* Adding `mode: 'spa'` to `nuxt.config.js` file

```bash
export default { 
  mode: 'spa'
}
```

* Adding `--spa` flag to every script command

```bash
"scripts": {
     "dev": "nuxt --spa",
     "build": "nuxt build --spa",
     "start": "nuxt start --spa",
     "generate": "nuxt generate --spa",
   },
```

With the following steps outlined above, we have the option of deploying our Nuxt app in three different modes.

## Deploying Nuxt App To Alibaba Cloud

We will be deploying our nuxt application using [Alibaba Object Storage Service](https://www.alibabacloud.com/product/oss) which is a cloud storage service that can be used to store massive amount of data anywhere in the world and we’ll be using this service to deploy our static website. To get started, You’ll need to already have an account with Alibaba Cloud, if you don’t go ahead and [create one](https://account.alibabacloud.com/register/intl_register.htm?spm=a3c0i.7911826.1389108.50.496814b3e1AFP5).\
In order to host our static website on Alibaba Cloud OSS, we must first complete the following steps:

* Create a bucket where we will store our website's files such as files, images, and scripts.
* Then upload the files to our bucket.
* Set our bucket to Static Website Hosting Mode.

After going through these steps we will have our site deployed to Alibaba Cloud and then we can access it using a similar link http://nuxt-app.oss-ap-southeast-1.aliyuncs.com/.

**Creating a Bucket on Alibaba OSS** In order to create a bucket, go ahead and click on the create bucket button as displayed on the image. You’ll be prompted with a modal to enter your **bucket name** and **region**. Make sure to set the **Storage Class** and **Access Control List(ACL)** to the default in the image below.

![](https://paper-attachments.dropbox.com/s_BDD8AA2B53B55AB1F1B87CE74B7807DCCD281A9D9FD24A74BA7C2D19CE99E369_1558942649457_Screen+Shot+2019-05-27+at+8.34.28+AM.png)

![](https://paper-attachments.dropbox.com/s_BDD8AA2B53B55AB1F1B87CE74B7807DCCD281A9D9FD24A74BA7C2D19CE99E369_1558943340514_Screen+Shot+2019-05-27+at+8.48.38+AM.png)

**Upload Files To Bucket** Next step is to upload our files to the bucket we just created. Because we are deploying as a static site we’ll need to run the `nuxt generate` command to create static files that we can upload. After running that command a `dist` folder will be created in our project directory. Then we head over to Alibaba to upload the files, click on **files** and you’ll then be able to click on **Upload**. Go ahead and drag the entire `dist` folder to upload modal and in a few seconds we’ll have our files uploaded.

![](https://paper-attachments.dropbox.com/s_BDD8AA2B53B55AB1F1B87CE74B7807DCCD281A9D9FD24A74BA7C2D19CE99E369_1558943463501_Screen+Shot+2019-05-27+at+8.49.55+AM.png)

**Set Bucket To Static Site Mode** And for the last step, we’ll need to set the bucket to static website hosting mode. On the dashboard, click on **Basic settings** and navigate to **static pages** and add `index.html` as the default homepage.

![](https://paper-attachments.dropbox.com/s_BDD8AA2B53B55AB1F1B87CE74B7807DCCD281A9D9FD24A74BA7C2D19CE99E369_1558944041888_Screen+Shot+2019-05-27+at+8.57.14+AM.png)

After going through the following steps, We will have our site running on a custom domain generated by Alibaba OSS.  http://nuxt-app.oss-ap-southeast-1.aliyuncs.com/

![](https://paper-attachments.dropbox.com/s_BDD8AA2B53B55AB1F1B87CE74B7807DCCD281A9D9FD24A74BA7C2D19CE99E369_1558944177046_Screen+Shot+2019-05-27+at+9.02.17+AM.png)

## Conclusion

Nuxt.js as an application can be either used for generating Static sites, Server rendered and Single page applications using Vue.js and this is what makes it universal. In this article, We have seen how to get started with Nuxt.js from setting up the project to understanding the features of Nuxt.js and also we looked at the directory structure and how to deploy a different version of your Nuxt app. Now you can go ahead and build web applications using Nuxt.js.

**Related Content** Checkout this article from another Alibaba Clouder on [Introduction to the Vue.JS framework](https://www.alibabacloud.com/blog/introduction-to-the-vue-js-framework_593901?spm=a2c65.11461544.0.0.52e85355cBSKoa).
]]></content:encoded></item><item><title><![CDATA[2019 In Review; My Year of Grace]]></title><description><![CDATA[I tagged 2019 my year of grace because a lot of events that happened in my life didn’t go the way I had planned it they were even better than I expected.]]></description><link>https://giftegwuenu.com/2019-in-review-my-year-of-grace/</link><guid isPermaLink="true">https://giftegwuenu.com/2019-in-review-my-year-of-grace/</guid><pubDate>Mon, 30 Dec 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
The year is 2025, and I’m randomly scrolling through my blog and I come across this post I’ve written, one thing is certain I’ll have a sheepish smile on my face. The purpose of writing a year-end review is to reflect on how well you did, check yourself and set goals for the next year. [I started doing this in 2018](https://www.giftegwuenu.com/my-2018-year-in-review-and-2019-resolutions) and I know there’s value here and it helps reinforce the fact that I’m doing great and hitting my long term goals.

I resolved at the beginning of the year to create a list of things I wanted to achieve before the year runs out I used [Notion](https://www.notion.so/?r=dc185bbb4b3443619f50b44d8415422d) for tracking my progress which I find helpful. I’m happy to say I accomplished all my goals for the year. Well, except a few like learning how to drive but I’ve moved those to my 2020 goals.  

![My Notion Board](https://paper-attachments.dropbox.com/s_613553E3A2CF0B36768E92B8020027C7BF360306EC6342F8BDEAE81FF9AA8BEE_1577438430063_Screenshot+2019-12-27+at+10.20.15+AM.png)

## Highlights of the year ✨

I tagged 2019 my year of grace because a lot of events that happened in my life didn’t go the way I had planned it they were even better than I expected. I am so sure God is looking out for me because I had a good year. 

***In 2019, I…*** 

- Got promoted at work in January
- Hosted 3 events for Vue Vixens Nigeria
- Started a the JAMstack Community with [William](https://twitter.com/iChuloo) and hosted 2 events
- Spoke 5 times this year and gave 1 workshop
- Traveled to 3 countries and visited 6 cities  
- Invited to 3 International Conferences 
- I became a Media Developer Expert for Cloudinary
- Started a YouTube Channel and created 12 videos and got up 464 subs in less than 6 months
- Published 23 posts on my blog and my blog traffic grew to 15,000 page views and on [Dev.to](https://dev.to) 129,000 post views.

### **Work**  
Overall I think my growth pivoted this year, Things started great at work as I got promoted in January, I was involved with a lot of open-source projects. I contributed to [Gridsome Docs](https://github.com/gridsome/gridsome.org), [Storefront UI](https://github.com/DivanteLtd/storefront-ui), [Learning Resource Roadmap](https://github.com/devcenter-square/Learning-Resource-Path-Front-End). In total, I had 1017 contributions on GitHub. I created a [starter for Gridsome called Minimal Blog Starter](https://github.com/lauragift21/gridsome-minimal-blog) which I’ve seen a couple of people using. 

![GitHub Contributions](https://paper-attachments.dropbox.com/s_613553E3A2CF0B36768E92B8020027C7BF360306EC6342F8BDEAE81FF9AA8BEE_1577440586388_Screenshot+2019-12-27+at+10.56.18+AM.png)


### **Writing, Speaking & Community**   
I wrote a total of 23 articles both on my blog and other publications and traffic on my blog grew by over 15,000 page views. I shared a lot of tutorials and decided to try video tutorials as well. I created 12 videos on [my YouTube Channel](https://www.youtube.com/channel/UCgUgg53iJX1pdabUxpkgozA) and grew my subscribers to 464 amazing subs.

My favorites among articles I wrote:

- [The Art of Googling](https://www.giftegwuenu.com/the-art-of-googling)
- [Building a UI Component with React & Storybook](https://www.giftegwuenu.com/building-a-ui-component-with-react-and-storybook)
- [A Practical Guide to Optimizing Performance on the Web](https://www.giftegwuenu.com/a-practical-guide-to-optimizing-performance-on-the-web)
- [Guide to using Alternative Text on Images](https://www.giftegwuenu.com/guide-to-using-alternative-text-on-images)

and YouTube Videos:

- [Personal Branding for Software Engineers and Designers](https://www.youtube.com/watch?v=HxDqyK3fNUs)
- [A Day in the Life of a Software Engineer in Lagos](https://www.youtube.com/watch?v=9mLMtAxSr8U)
- [WHAT'S IN MY WORK BAG?! // Software Engineer Edition](https://www.youtube.com/watch?v=ENaGmtn8dho&t=238s)


![YouTube Channel](https://paper-attachments.dropbox.com/s_613553E3A2CF0B36768E92B8020027C7BF360306EC6342F8BDEAE81FF9AA8BEE_1577441397781_Screenshot+2019-12-27+at+10.40.27+AM.png)


I spoke at [5 events](https://speakerdeck.com/lauragift21), one of which was a meetup in Denver my first ever international speaking opportunity and gave a Vue Vixens workshop at [Concatenate Conference.](http://concatenate.dev/) 

![](https://paper-attachments.dropbox.com/s_613553E3A2CF0B36768E92B8020027C7BF360306EC6342F8BDEAE81FF9AA8BEE_1577443603774_EGgtusgWwAA_muk.jpg)


I was super active in the community this year. This comes with a lot of hard work and opportunities. I helped organized 6 events (meetups and a conference). The Vue Vixens Nigeria chapter I help run had 3 events with over 150 women introduced to Vue.js. JAMstack Lagos a community I started with a friend [William Imoh](https://twitter.com/iChuloo) now has almost [600 members on Meetup](https://www.meetup.com/JAMStack-Lagos) with two events under our belts I look forward to doing more in 2020. I also helped co-organize one of the biggest conferences in Africa [Concatenate Conference](http://concatenate.dev/) with other amazing folks (Sarah, Simona, Christian, and Silm) this is my biggest highlight of the year.


![Vue Vixens 😍](https://paper-attachments.dropbox.com/s_613553E3A2CF0B36768E92B8020027C7BF360306EC6342F8BDEAE81FF9AA8BEE_1577443125933_IMG_5611.jpg)


My dream to attend an international conference came to pass! Not only did I get a chance to attend one but I attended three different conferences. Microsoft Ignite, GitHub Universe and AWS re:Invent. This by far was one of the biggest events in my life this year and I’m grateful because not only did I attend I got to meet some of my heroes and made new connections not to forget the tons of knowledge gained on this adventure.

![](https://paper-attachments.dropbox.com/s_613553E3A2CF0B36768E92B8020027C7BF360306EC6342F8BDEAE81FF9AA8BEE_1577444207304_IMG_6691-COLLAGE.jpg)


I got recognized as a [Media Developer Expert for Cloudinary](https://cloudinary.com/partners-old/media-developers). They started the program this year and MDEs are unique software and design advocates who share their knowledge, expertise, and insights at community events and across the social web, aided by Cloudinary’s products and resources. 
I was a guest on 3 podcasts in 2019 alone!! [Views on Vue](https://devchat.tv/views-on-vue/vov-071-gridsome-with-gift-egwuenu/)[, That’s my JAMstack](https://thatsmyjamstack.com/posts/gift-egwuenu/)[,](https://frontendhappyhour.com/episodes/sipping-our-drinks-enjoying-the-vue-vue-js/) and [Front End Happy Hour.](https://frontendhappyhour.com/episodes/sipping-our-drinks-enjoying-the-vue-vue-js/)

### **Life**   
My life was quite interesting nothing out of the blue. I was more intentional about self-care and looking out for myself. Also, like my friend will say trying to live my best life.


- I read about 3 books not proud of this because I wanted to do more but didn’t dedicate time to reach my set goal. I promise myself I’ll do better by investing in audiobooks.
- I turned 24 and it feels like I’m getting old omg!!
- I traveled to 6 cities in 3 countries. This was such an amazing experience and I look forward to doing more trips in 2020.
![Happy Moments](https://paper-attachments.dropbox.com/s_613553E3A2CF0B36768E92B8020027C7BF360306EC6342F8BDEAE81FF9AA8BEE_1577445786445_IMG_3515-COLLAGE.jpg)

- I decided to cut my hair. Best decision ever as I now feel free I never liked making my natural hair it was so painful.
![Big Chop](https://paper-attachments.dropbox.com/s_613553E3A2CF0B36768E92B8020027C7BF360306EC6342F8BDEAE81FF9AA8BEE_1577445904155_IMG_0349-COLLAGE.jpg)


## The L's in My Life 
I'll be lying to myself if I said the entire 2019 was great and only good things happened to me. Well, life they say is not always a bed of roses. I had different points in my life when I doubted myself and dealt with depression. Not even going to think about the amount of times I felt like an imposter. A shitty place to be in life is when you can't find happiness I was in this block for a period and I hated it. I got rejected from getting things I was really hoping I would secure but that didn't stop me from trying again when I failed because if anything I won't give up. I kept the energy high and my attitude to those rejections is to keep trying I'm taking this same energy into 2020.

## Humans of 2019
I couldn't think of a better name for this section. I had grateful list in mind but decided to change it last minute. A special list of people who came through for me this year in one way or another and I want to thank them for taking a chance on me. These are people I now call friends and happy I have them in my life.
[Sarah Drasner](https://twitter.com/sarah_edo), [Franca Rotwukka](https://twitter.com/Mac_2reel), [Simona Cotin](https://twitter.com/simona_cotin), [Karissa Peth](https://twitter.com/karissapeth), [Adora Nwodo](https://twitter.com/AdoraNwodo), [Seyi Adeleke](https://twitter.com/seyi__adeleke)

## What’s Next?  

I have a couple of things planned out for 2020. I also look forward to doing even more work and creating more impact than I did this year. It’s been such an exciting and scary journey I’ve had and I sincerely look forward to what I do with myself in 2020. My mantra for 2020 is to Do The Work!! Some plans I’ve in the works and hope to achieve include:

**More Speaking Engagements:** I hope to speak at more events in 2020 and also improve my skills as a speaker. 

**Keep the Fire Burning; Learn In Public:** I love the concept of [Learning in Public](https://www.swyx.io/writing/learn-in-public/) and I want to be intentional about this in 2020. The act of learning in public means you get to share your skill development and your works in progress online, even before you think you’re ready. I want to continue sharing content on my blog, YouTube and help build communities. 

**Release Egghead Lessons:** I became an Egghead Instructor this year and I’m working on a couple of lessons and hoping they get released in 2020.

**Write a Book and release a Course:** I started working on this project this year but I look forward to releasing them in 2020.

**Land a New Job:** I want to explore more opportunities by 2020 that includes finding a new job. I’m open to working remotely or relocation. If you have any leads please let me know thanks!

That wraps up my year! It was a great one I can’t wait to see what I do in 2020 as it’s the start of a new decade I’m so excited to keep growing and making an impact in my community.
]]></content:encoded></item><item><title><![CDATA[Reflections from Microsoft Ignite 2019]]></title><description><![CDATA[ I had the opportunity to attend Microsoft Ignite as a community leader. Here's my recap and reflections from the conference]]></description><link>https://giftegwuenu.com/reflections-from-microsoft-ignite-2019/</link><guid isPermaLink="true">https://giftegwuenu.com/reflections-from-microsoft-ignite-2019/</guid><pubDate>Sun, 10 Nov 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
This past week, I had the opportunity to attend [Microsoft Ignite](https://www.microsoft.com/en-us/ignite) as a community leader. This is by far one of the best things that have ever happened to me this year. Over the last few years, I started my career in tech I've always wanted to attend an international conference I just didn't know when I'll get the chance to.

https://twitter.com/lauragift21/status/1191056103045550080

Microsoft Ignite is an annual conference put together by Microsoft with over 25k attendees ranging from IT Professionals, developers, architects, and data professionals who want to expand their proficiencies. The event features learning paths providing unmatched opportunities to explore the latest tools, receive deep technical training, and get specific questions answered by Microsoft experts.

https://twitter.com/lauragift21/status/1191449564458475528

The conference ran for 5 consecutive days and I had a lot of sessions scheduled but all I was looking forward to is Learn, Explore and Connect while at the conference.

## Day 1 (Vision Keynote)
The first day of the conference was insightful I had first-hand experience attending [Satya's keynote session](https://myignite.techcommunity.microsoft.com/sessions/77831?source=sessions) where he made a couple of announcements of new products and improvements to other Microsoft products. One of my favorites was announcing [Visual Studio online](https://visualstudio.microsoft.com/services/visual-studio-online/) and Live share support.

https://twitter.com/lauragift21/status/1191368024588206080

Other announcements include:

[Azure Stack Edge  
Azure Arc  
Azure Synapse  
Autonomous Systems  
Azure Quantum  
Microsoft Edge announcements](https://myignite.techcommunity.microsoft.com/sessions/77831?source=sessions)

I also got the chance to attend other sessions which I found interesting so much content to digest with a wide range of topics and interesting sessions to attend. I was able to attend these sessions as well. 

[Travel the world, meet the community](https://myignite.techcommunity.microsoft.com/sessions/80247?source=schedule) - [Elaiza Benitez](https://twitter.com/benitezhere)  
[Creating an inclusive community event](https://myignite.techcommunity.microsoft.com/sessions/80296?source=schedule) - [Lars Klint](https://twitter.com/larsklint)

https://twitter.com/lauragift21/status/1191411453519171585


The Partner Expo area is also one place I liked visiting because I got the chance to learn about products from Microsoft's Partner on the work they do and how they are leveraging Microsoft in their products and another perk you get is free swags who doesn't like free swags right??

https://twitter.com/lauragift21/status/1192570538960576512

## Day 2 (Developer Keynote)

[The developer keynote](https://myignite.techcommunity.microsoft.com/sessions/81591?source=sessions) themed "Application development for everyone" was one session I was looking forward to and I was not disappointed because the keynote speaker was [Scott Hanselman](https://twitter.com/shanselman) and oh well we know he's an amazing speaker.

Here are my takeaways from the Keynote:

https://twitter.com/lauragift21/status/1191725350910341120?s=20

- Visual Studio Online - You can create a dev environment in minutes just online and it works the exact way as Visual studio with access to the full extension marketplace.
- Azure functions now have new languages support .Net Core 3.0 and Powershell.
- [Intellicode](https://visualstudio.microsoft.com/services/intellicode/) AI-assisted IntelliSense saves you time by putting what you’re most likely to use at the top of your completion list.

- Live share support which lets you do real-time collaboration.

We had several other demos on stage from other amazing speakers.

Another session was an AMA with Scott Hanselman put together for the community leaders and that one was certainly one of my favorite I have a lot of favorites sessions you know! We got the chance to ask Scott any question we had in mind and he also shared his story with the entire room.

https://twitter.com/lauragift21/status/1191749405185126400

https://twitter.com/lauragift21/status/1191768696978649088


The last session I was in was something I was looking forward to listening to and it was another session from Scott Hanselman you can say it was a Scott Hanselman dedicated day! 😆

https://twitter.com/lauragift21/status/1191831297972408323


## Day 3 & 4 (More Sessions)
The following days were really busy as I tried to attend as many sessions as I could. I missed some interesting sessions I scheduled but the good thing is it's all recorded and available to watch after. I prioritized meeting people from attending the sessions because I know I can always go back and watch them. 

I also had a short interview with the channel 9 team and I talked about what community means to me and how being at Ignite has impacted me.

https://twitter.com/lauragift21/status/1191843689582211072

I also met Brian Holt omg!! 🤯

https://twitter.com/lauragift21/status/1192366791886024705

A lot of interesting places in the hub worth mentioning but one of the best was the therapy animal area with lot of pets to play with. Trust me I spent some time there.

https://twitter.com/lauragift21/status/1192459305531908096?s=20

## Day 5 (Explore)

This was the last day of the conference after a long week I got the chance to explore since this was the last chance I had. One area I loved was the Diversity and Inclusion Lounge.


It had pictures and videos telling stories of people and the impact of Diversity and Inclusion. I think this is great to have this sort of thing at a conference because it creates a safe space for people not knowledgeable in this area to learn as much as they can.


![Alt Text](https://thepracticaldev.s3.amazonaws.com/i/zgndbx29wyq5v5pzl2q7.jpg)

![Alt Text](https://thepracticaldev.s3.amazonaws.com/i/54trsinij7a77mpyy6jj.jpg)


I made two recap vlogs during the conference on my YouTube channel check that one out as well.

https://www.youtube.com/embed/n5R7ucmeezc

https://www.youtube.com/embed/4nfY1uZk7ko


This conference was a big win for me because I got to learn and make connections that I never would have thought was possible I'll like to thank the following people for helping out in one way or another [Simona Cotin](https://twitter.com/simona_cotin), [Nitya](https://twitter.com/nitya), [Piyali](https://twitter.com/piyali_vancity), [Sarah](https://twitter.com/truckerfling), [Adam](https://twitter.com/adamj89), and [Meghan](https://twitter.com/MegMallin).
]]></content:encoded></item><item><title><![CDATA[The Benefits of Owning a Personal Blog]]></title><description><![CDATA[In this post, I'll outline the benefits of blogging and why it's important to start a blog as a developer and also share several ways you can get your blog up and running.]]></description><link>https://giftegwuenu.com/the-benefits-of-owning-a-personal-blog/</link><guid isPermaLink="true">https://giftegwuenu.com/the-benefits-of-owning-a-personal-blog/</guid><pubDate>Mon, 28 Oct 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
![bANNER](https://res.cloudinary.com/practicaldev/image/fetch/s--9K2g73UM--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/gr0dt31b0rbqol277wpc.png)

As developers, We always tend to look up solutions to a bug or an error on Google and half the time we do this we are redirected to a blog written by another developer or even yourself in some cases. This is one of the ultimate reasons for owning a personal blog - teaching other developers.
In this post, I'll outline the benefits of blogging and why it's important to start a blog as a developer and also share several ways you can get your blog up and running.

I became aware of the benefit of personal blogging in February 2018. This was when I started [my own blog](https://www.giftegwuenu.com). I initially took a course on [Pluralsight about personal branding](https://www.pluralsight.com/courses/developing-killer-personal-brand) and it was a goal to complete at least one of the steps outlined in the course. I went ahead to start with blogging by purchasing my domain name even though I had no clue what content I will write about.

Let's start with the good stuff I'll share the benefits of starting a personal blog and further explain how to get a blog up and running. Because I think it's important I share, I'll also write about my process and share resources needed to move forward.

## Benefits of Blogging
These are some of the reasons I feel it's really important to start your blog.

- **Sharing Knowledge:** Most times you find yourself trapped trying to solve a specific problem and with all of Google's help you still can't find a solution. You are finally able to fix the bug and instead of hoarding that knowledge you decide to write an article on how you fixed the problem helping thousands of other developers. This is by far one of the importance of blogging you teach others and this is a very fulfilling experience especially when you get sent messages of how your article helped other developers.

- **Develop your Brand:** Blogging helps boost your brand. You become known for your work and this will improve your reputation in the community.I have met a lot of people because I started blogging consistently and also gotten opportunities to grow my network. 

- **Learning New Tech:** Blogging is a good way to learn about new technologies and concepts. As developers, learning never stops for us it's a continuous journey so how do you keep up and still stay sane? I've discovered one way to make the best out of this is to learn a new concept and teach it that way you end up teaching other people and also solidifying those concepts. 

- **Introduce yourself to the Community:** When you consistently create helpful content and share it with the community. You become known as a teacher in your field. An example is if you create content on web development you become known in the web development community and that's a great way to make friends and connect with people in the community. Some platforms that will enable this happen are [Twitter](https://www.twwiter.com) and [Dev.to](https://www.dev.to).


## How do you start?

Now that you know the benefits of blogging how do you start your blog? I always get asked how I created mine and where I host my blog. I'll share all the details here. Now there are several ways to go about this and I'll recommend creating a blog and having a domain name that is closely related to your name. That way it is easy to find you on the internet.
But feel free to disregard my recommendation and do what fits your needs.

- **Pick a Domain or Field:** This should always be your first thought before going on to publish your first post. Think about what you want to specialize in. Are you more interested in web, mobile, security, or career guides? This is the best time to pick a domain you can as well do as much as you want but make sure you are specific to get a target audience that will always return to your blog.
- **Create a Platform:** This is the interesting part that I love. You get to choose a platform that best suits your needs. I'm going to outline some platforms that I think is great and you make the choice.
   - Build your blog! You can either decide to use Wordpress which is a pre-generated CMS or pick a static site generator like Gatsby and Hugo and create a custom made blog for yourself.
  - [Medium](https://medium.com): You can create an account and post directly to medium the downside to this is [you don't own your content](https://ownyourcontent.wordpress.com/2019/05/14/khoi-vinh-on-how-his-blog-amplified-his-work-and-career/).
  - [Dev.to](https://dev.to):  This platform allows you to post your content and has a huge developer community and also allows you to cross-post your content more on that later.
  - [Hashnode](https://hashnode.com): Hashnode is also a great platform for blogging with a huge number of developer centered content.
- **Syndicate your content:** I recently learned a concept called [POSSE - Publish (on your) Own Site, Syndicate Elsewhere](https://indieweb.org/POSSE). This means you get to keep your content on your site and share on other platforms like [Medium](https://www.medium.com), [Dev.to](https://www.dev.to), and [Hashnode](https://www.hashnode.com) and you keep ownership of your content.
- **Post on Social Media:** Social media is a tool you can use to gain more readership. When you publish a new post remember to share across all your social media platforms to gain more audience.
- **Stay Consistent:** Remember to stay consistent when you start your blog. That way you can always learn, teach and connect with the community and you can measure your success over time.

## My Process

I follow the same process I've outlined above but I'll go ahead and share in detail how I create my content.

- [My blog](https://giftegwuenu.com) is built using [Gridsome](https://www.gridsome.org) static site generator hosted on [Netlify](https://www.netlify.com) and I write my content in [Markdown](https://www.markdownguide.org/basic-syntax/).
- I have a Notion Page dedicated to collecting blog post ideas when I think of an idea I add it on there.
![Alt Text](https://thepracticaldev.s3.amazonaws.com/i/2022roez4pnw8dhuyyki.png)
- I start an article by researching on the topic if it's new to me and coming up with an outline. After I complete the article I syndicate to [Dev.to](https://www.dev.to) and share it on social media(Twitter, Instagram, Linkedin).
- I also do this thing where I share after about 3 weeks on social media to gain more audience.

Thanks for reading! I hope you find this post helpful and if after reading this you decide to start blogging please share with me here or on [Twitter](https://www.twitter.com/lauragift_).


## More Resources

[You should make a blog!](https://drewdevault.com/make-a-blog)  
[Why Blogging is Awesome](https://dev.to/ladybug/why-blogging-is-awesome-127)  
[How to do technical blogging](https://dev.to/yelluw/how-to-do-technical-blogging)  
[10 Killer Tips: How to Format a Perfect Blog Post](https://writtent.com/blog/format-perfect-blog-post-10-tips/)  
[Thoughts on blogging after six months on dev.to](https://dev.to/helenanders26/thoughts-on-blogging-after-six-months-on-devto-3a9p)
]]></content:encoded></item><item><title><![CDATA[The Art of Googling]]></title><description><![CDATA[Google is your best friend. Learning how to properly Google problems when you have a blocker is a key skill for every developer out there.]]></description><link>https://giftegwuenu.com/the-art-of-googling/</link><guid isPermaLink="true">https://giftegwuenu.com/the-art-of-googling/</guid><pubDate>Sat, 07 Sep 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
Inspired by this article from [localghost.dev](https://localghost.dev/2019/09/everything-i-googled-in-a-week-as-a-professional-software-engineer/), I've decided to write mine but with a twist. In this article, I'll be outlining some tips for improving your googling skills and also share the things that I've googled in the past week as a Software Engineer. This should be interesting right let's find out!


![QoPHzAqpt5](https://user-images.githubusercontent.com/17781315/64488351-d7182580-d23e-11e9-92b8-20ebeba95cfd.gif)

[Google](www.Google.com) serves as a large database for every information you need in the world. You can find anything on there regardless if it is related to tech or not. In our case, I'll be focusing on the tech aspect of this topic. I have been a developer now for almost 3 years and one thing that I know is that I don't know everything. As a developer in my daily work life, I tend to seek answers from Google, I look up how to write a specific syntax or even check the meaning of an array. This information is available to me and it is normal to look up things I'm not certain of or seek help if I encounter a bug. One of the key skills you need as a developer is the ability to effectively search for a solution to a problem or error.


## Helpful Tips For Improving Your Googling Skills
- **Using the wildcard asterisk (*):** This is a recent trick I learned when searching for answers with a specific error. You can copy the entire error to google search and get a few results related because you added some keys specific to your app. But to get the best results, you can edit that and add the asterisk wildcard to your search and this will improve your result and give you precise answers to what you need.

![Shot](https://user-images.githubusercontent.com/17781315/64489479-95da4280-d24b-11e9-9af7-0e82eb71ea8d.png)

- **Using a specific domain:** Adding a specific domain can also help you refine your result when searching on google. If you know the specific site to search i.e Stack Overflow. You can append the site name `site: sitename` to your search so it returns results only from that site.

![Screen Shot 2019-09-08 at 3 20 05 PM](https://user-images.githubusercontent.com/17781315/64489528-2add3b80-d24c-11e9-8630-e1fcc30ec7a2.png)

- **Use Good Keywords:** Finding results tailored to your search depends on what kind of keyword you use. When searching, include a keyword that is closely related to the problem you are searching (e.g JavaScript, Array Methods, etc).

- **Search for Titles using intitle, Text using intext** You can refine your search to only return texts or titles from a specific site. This will help drill down the result to return exactly what you're searching for. When searching for title you can use intitle as a prefix and intext: for text in the body of the site.

![Screen Shot 2019-09-08 at 3 37 16 PM](https://user-images.githubusercontent.com/17781315/64489754-9e804800-d24e-11e9-9aed-06291295dd46.png)

## What I Googled in the Past Week

Now that I have covered some tips to help you improve your googling skills, I'll now share some terms I googled in the past week. 

### Monday

- Filter an Array with JavaScript - I was working on a chore and needed to see how the filter method works
- Free Screen Recording software - I needed this badly
- What does Egwuenu stand for (I honestly don't know what happened here)

### Tuesday
- Nano-degree Scholarship - thought of the possibility of getting one and lost interest when I saw the price
- Take a screenshot on Mac
- Center a div with Grid


### Wednesday
- Amazon Logo SVG
- Minify SVG - Trying to reduce the size of an SVG image
- Deploy Nuxt to Azure - looking up an article I wrote
- Undo a git commit


### Thursday
- Add breakpoint Visual Studio Code
- Azure subscription disabled - trying to figure out why my azure app was down
- Clearing errors for expo ios - I was having issues with react native app
- Embed open collective backers



### Friday

- Adding Data to a React Native App
- Debugging React Native App
- Virtualized List: Missing keys for items
- Grid with React Native - checking if this was a thing with React Native
- Gridsome docs

## Conclusion
The idea for writing this is to show you that not every developer is a 10x engineer. We all look up and Google things at one point or the other and I also read somewhere that it's better to know what and how to Google than to spend time cramming. I can tell you I know what googling skills can do for you in your career once you master that art but I'll let you figure it out yourself and you will be glad you did.

Closing this article with a meme I found on Google (get it? 😉)

![Screenshot_18](https://user-images.githubusercontent.com/17781315/64488909-43962300-d245-11e9-913c-42b58c199ebb.jpg)



]]></content:encoded></item><item><title><![CDATA[Deploying a Static Nuxt App to Azure]]></title><description><![CDATA[Nuxt.js is a universal framework for developing Vue apps. Learn about Nuxt and how to easily deploy a static Nuxt application to Azure with Azure App Services.]]></description><link>https://giftegwuenu.com/deploying-a-static-nuxt-app-to-azure/</link><guid isPermaLink="true">https://giftegwuenu.com/deploying-a-static-nuxt-app-to-azure/</guid><pubDate>Fri, 09 Aug 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
I wrote an article for [Telerik](https://www.telerik.com/blogs) on how to deploy a static nuxt app to azure.  
Enjoy and I hope you find it helpful!


[Deploying a Static Nuxt App to Azure](https://www.telerik.com/blogs/deploying-a-static-nuxt-app-to-azure)

![Image](https://d585tldpucybw.cloudfront.net/sfimages/default-source/default-album/vue_870x2208d7dbbaf42744f308a128409940b4039.png?sfvrsn=fe5e567d_1)]]></content:encoded></item><item><title><![CDATA[Building A Career In Tech As A Newbie]]></title><description><![CDATA[In this present day, Over 47% of the world's population use the internet and technology to power their lives and the ratio of software developers to job market is still low meaning there's a lot of vacant job available to be filled up. In this article, we discuss how to break into tech and what it means to start out as a developer and how to keep building your career as you embark on this journey.]]></description><link>https://giftegwuenu.com/building-a-career-in-tech-as-a-newbie/</link><guid isPermaLink="true">https://giftegwuenu.com/building-a-career-in-tech-as-a-newbie/</guid><pubDate>Sat, 13 Jul 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[## Introduction

The tech industry is ever evolving, what this means is the industry is growing rapidly and there’s no chance for you to be comfortable with an acquired skill without trying to grow or level up on a skill. In this article, I’ll be sharing what it means to start out as a developer and how to keep building your career as you embark on this journey.

![Image from unsplash by](https://paper-attachments.dropbox.com/s_A7D74081BACFF863EFFEB7AD26D45E7FDE06394D44DF3F96354E453866451119_1557037409925_photo-1495805442109-bf1cf975750b.jpeg)

## Starting Point 📍 

Let’s begin this journey, Are you a newbie or you’re currently on the verge of switching careers and you are certain you want to venture into software development. I applaud your courage and I’m happy you’ve made that decision because you won’t regret it I assure you. I know it might be a bit overwhelming when you start out but with time everything will ease in and you will begin to understand how things work. The tech industry today is one of the most supportive industries I’ve ever been a part of. Regardless of the path you have decided to take on be it Front-End Development, Back-End Development, Full Stack Development, Mobile App Development, and Data Science, etc, this article still relates to you and by following through with it I’m certain you’ll gain useful knowledge from it.
Now as a newbie in the tech world where do you start from? How do you get updates about the latest happenings, how do you get help when you’re stuck, how do you connect with other developers like yourself all of these are what is running through your mind and I totally get you. This is why I’m writing this article, to share the basic knowledge on how you can kickstart your career from scratch.
Now to get you in the boat of what steps you should take to be successful. I'll be highlighting several ways you can kick start your career in tech.

## Tips On How To Fast Track Your Developer Career

Building a career will involve you try out several ways on how you can be successful in the path and that you are involved in. The steps I’ll be outlining have proven to work for a number of developers including myself. so let’s get right into it. some ways you can leverage in building your career include:

- Community
- Online Resources
- Mentorship

## Community

Being involved with a community either online or in-person will go a long in helping you improve your career. There are several local communities that help foster the growth of developers both by organizing events like meetups and also by organizing workshops. As developers, it is important that we have a community we belong to based on the fact that we get to learn how other developers think, we network with other developers at these events and we also get hear other people’s story on how they kicked off their journey in tech. Also being in a community gives you the opportunity to meet new friends or a potential employer which is a great way of breaking into the tech ecosystem if that is something you are looking out for. A large number of developer communities exists across the world all you just need to do is find them. I’m a member of the [GDG community](https://developers.google.com/programs/community/gdg/apply/) and [forloop Africa community](https://forloop.africa/) and I can’t describe the benefits of joining communities enough. I’ll just urge you to find a local community and join.

## Online Resources

This is a no brainer as we need to learn the tech right. That is the whole essence of starting the journey in the first place. Figuring out where to start your journey can be overwhelming but then that is why you have the Internet and Google to help us figure out these things. They are a lot of online resources both free and paid that can help you in your journey of becoming a world class developer. After you’ve mapped out the path you want to take the next thing I’ll advice is to start learning the technologies you need to succeed. Defining a guided path for yourself is very important and setting goals for what you want to achieve is also important. One of the many resources out there I’ll also recommend [freecodecamp](https://www.freecodecamp.org/) as a starting point if you’re interested in Front end development. Because it is very interactive and provides a guided path from beginner to advanced and lastly for the community behind it. I’ll like to plug in a [project](https://learning-resource-path.gitbook.io/resources/) I worked on for beginners venturing into front end development. It will also serve as a guide for you on your journey. Above all, the internet is flooding with a lot of great resources that will help you win in your new chosen career path.

## Mentorship

Mentorship is the act of seeking the guidance provided by a mentor, especially an experienced person in a company or industry. Getting a mentor is also an important step you can take as an effort for building your career. We as humans can succeed on our own as we are trained to fend for ourselves but we can do better by following the footsteps of those that are ahead of us. One of the most important thing you can do as a developer is to get a mentor that is interested in your growth and passionate about helping you become successful. In our career path, everyone has a role model right because I know I do. One thing I learned while finding ways I can improve and build my career is not only seeking physical mentorship, by the way, it is great to go for it if you can. But also by following the steps of my role models. Who do you look up to in the industry? Find out how they started their journey what worked for them and what did not. This is in actual fact a great way to learn because you won’t be making obvious mistakes because you’ve learned from mistakes from others. So really pick what works best for you in this case, a mentor that can check up on you from time to time and see how you’ve improved or follow the steps of the leaders in your field. If you’re up to it you can do both and that is great.

## Advice For Developers

I want to share advice regarding your career and I think this is a great way to do it. I’ve always wanted to share with developers starting out what worked for me and how I think following in the same footsteps can be beneficial to others. So here we go.

**Celebrate Your Small Wins:** This is as important as every other thing you do, regardless of how small the progress you’ve made in your journey always learn to celebrate it. Doing this as often as possible makes you realize you’re not doing a terrible job after all and you’ll gain more confidence in your abilities which I think will make you want to do more and explore further possibilities.

**Find Your Learning Style:** Everyone learns differently, and I think finding out what method works for you earlier will influence how you learn over time. There are people who are more comfortable with traditional learning through bootcamps, others prefer watching videos tutorials and taking online courses or reading articles to grasp fundamental concepts. whichever method works for you, make it a habit and also stick to it as this will make your learning smooth and you avoid overwhelming yourself.

**Don’t Be Afraid To Seek Help:** A lot of people find it difficult to ask for help when they get stuck. I did too when I was starting out but I’ll say we should not be a victim and fall into the pit of having to figure everything out ourselves. Because it gets overwhelming as you’re learning and it is okay to ask for help and seek advice from more experienced developers and they’re a lot of ways this can be done. i.e Stack Overflow, Forums, Community Slack Groups, and mentors can be of help when you get stuck and need answers.

**Learn By Doing:** This is as important as other advice I’ve given, I think this is very relevant when you’re starting out. Learning by doing here means you’re not just watching that youtube video or reading that article on CSS Grid, but you’re also practicing what you’re learning because, to be honest, that is the most efficient way to learn. When you learn a new concept and you go ahead to tinker with the code I think you’ll have that knowledge stick as compared to just reading that article or watching that course. Always remember to try out what you just learned, improve on it and even go ahead and build your own based on what you’ve learned.

## Conclusion

In this article, I outlined ways new developers can break into the tech industry and also sustainably build their career. My takeaway from my years in tech and what I think should be general knowledge to everyone is that you never stop learning as a software developer. This journey of building your career never ends because you have to continue sustaining what you’ve built and in this ever-changing industry we are in, the only way to do it by staying abreast with the technologies you work with and look for means to gain new knowledge as time goes on. Once you know this and understand it then you are going to do well regardless of your chosen career path.]]></content:encoded></item><item><title><![CDATA[An overview of the top 10 React UI kits in 2019]]></title><description><![CDATA[Looking for a React UI kit that is right for you? In this article, we are going to review 10 React UI kits]]></description><link>https://giftegwuenu.com/an-overview-of-the-top-10-react-ui-kits-in-2019/</link><guid isPermaLink="true">https://giftegwuenu.com/an-overview-of-the-top-10-react-ui-kits-in-2019/</guid><pubDate>Sun, 07 Jul 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
I wrote an article reviewing [the top 10 React UI kits in 2019](https://blog.logrocket.com/top-10-react-ui-kits-in-2019/) on [Logrocket's Blog](https://blog.logrocket.com). In this article, I gave a detailed overview of React UI kits to use in 2019.

![React Kit](https://i0.wp.com/blog.logrocket.com/wp-content/uploads/2019/07/reactuikits.png?w=730&ssl=1)]]></content:encoded></item><item><title><![CDATA[Building a Blog with Vue and Markdown Using Gridsome]]></title><description><![CDATA[Enter the world of static site generation and the JAMstack using Gridsome. Learn to build a blog using Markdown and GraphQL, and then deploy it to Netlify.]]></description><link>https://giftegwuenu.com/building-a-blog-with-vue-and-markdown-using-gridsome/</link><guid isPermaLink="true">https://giftegwuenu.com/building-a-blog-with-vue-and-markdown-using-gridsome/</guid><pubDate>Mon, 24 Jun 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[I wrote an article for [Telerik](https://www.telerik.com/blogs) on how to build a blog with Vue and Markdown using Gridsome static site generator.

[Building a Blog with Vue and Markdown Using Gridsome](https://www.telerik.com/blogs/building-a-blog-with-vue-and-markdown-using-gridsome)

![banner](https://d585tldpucybw.cloudfront.net/sfimages/default-source/blogs/templates/vuet-dark_870x220.png?sfvrsn=83bce1fb_3)
]]></content:encoded></item><item><title><![CDATA[Building a UI Component with React and Storybook]]></title><description><![CDATA[Storybook is an open source tool for developing UI components in isolation. In this article, I’ll be explaining how to build an interactive UI component using React and Storybook.]]></description><link>https://giftegwuenu.com/building-a-ui-component-with-react-and-storybook/</link><guid isPermaLink="true">https://giftegwuenu.com/building-a-ui-component-with-react-and-storybook/</guid><pubDate>Wed, 12 Jun 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
I wrote a follow up article to [Introduction to Storybook](https://scotch.io/tutorials/an-introduction-to-storybook-organize-how-you-build-js-components) article on [Scotch.io](https://scotch.io) titled [Building a UI Component with React and Storybook](https://scotch.io/tutorials/building-a-ui-component-with-react-and-storybook)

![Storybook](https://scotch-res.cloudinary.com/image/upload/w_1000,q_auto:good,f_auto/v1557910084/beqwvt0gsl0hsht9hadb.svg)]]></content:encoded></item><item><title><![CDATA[Building A Killer Personal Brand]]></title><description><![CDATA[In this article, I'll be sharing the benefits of building a personal brand, why it is important and some tips to get you started on that journey.]]></description><link>https://giftegwuenu.com/building-a-killer-personal-brand/</link><guid isPermaLink="true">https://giftegwuenu.com/building-a-killer-personal-brand/</guid><pubDate>Sun, 09 Jun 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
I gave a talk at the International Women's Day event at Women Tech Makers Ajah, Lagos and I've decided to turn that talk into a blog post that everyone can access. Personal Branding is a term we have probably come across a few times and even know what it is all about and how it ties to building a career.  In this article, I'll be sharing the benefits of building a brand, why it is important and some tips to get you started on that journey.

## What is Personal Branding

![pb](https://thepracticaldev.s3.amazonaws.com/i/79qprwog7gqhz616lyad.png)

Personal Branding is the process of developing a **"mark"** that is created around your name or your career. You use this **"mark"** to express and communicate your skills, personality, and values.

## Why Building A Brand Is Important

![why](https://thepracticaldev.s3.amazonaws.com/i/3mo783enaybf3w315o2l.png)

The idea of personal branding in this case for developers is not to cumulate a number of followers on social media or the social status attached to it. But rather it is a way to grow in your career and also create a niche for yourself. So why is it important to build a brand for yourself?

- **Career Advancement:** This is one of the most reason why I think building a brand is worthwhile because you end up taking your career to the next level. When you have a brand, you tend to do less convincing because now your brand speaks for you. In a case where you're looking to switch Jobs or take a new role, I've found that having a brand for yourself makes that process a tad bit stressful.

- **Purpose:** Every single person has a purpose that they are working towards achieving and this might be that you want to become a better teacher or it can be that you love animations and sharing your work with others gives you a sense of accomplishment whatever your purpose is, cultivating that and making it a brand for yourself will eventually make you achieve your goal.


- **Self Awareness:** At the end of the day, you want to be recognized for the great work you're doing right, building a brand around your name will make this even easier because people around you will start to recognize your work and get acquainted with your brand and this eventually gives you the self-awareness you need and make you feel like people are interested in your work and value you offer.

I love this quote by Chris Ducker take a minute to think about it before moving on.

> Your personal brand is what people say about you when you are not in the room, remember that - Chris Ducker


## How To Build Your Brand?

Now that we have established the fact that creating a brand for yourself is the best way to go both for your personal and career goals. Let's take a look at the ways you can build your brand.


![how](https://thepracticaldev.s3.amazonaws.com/i/w8za0tv5ye13keiukx11.png)

- **Create Your Persona:** A Persona is an aspect of one's character that is presented to or perceived by others. Building a persona or bio should be a step towards building your brand. Create a unique bio for yourself that defines who you are, the work you're doing and why people should be interested in you.

- **Be Yourself:** Faking it till you make it is not the drill here. I'll like to advise you to be yourself no matter what your plans are, Do You! Never feel the need to pretend to be what you are not just to attract attention because, in the end, that is you living a lie. Find out what works best for you and stick to it.

- **Share Your Knowledge:** I cannot overemphasize this enough, share the knowledge you have by either blogging about it, making video tutorials or mentoring others. I think it is a win-win situation here because you still learn from doing these things and also impact other people lives.

- **Build Your Platform:** You will need to build a platform for yourself where you can safely share your work and promote your brand. By creating a personal portfolio or a blog you'll be on the right path to making your work known to others and you can also leverage the power of social media to help you with this.


### 12 Month Strategy

![](https://thepracticaldev.s3.amazonaws.com/i/ha5mx9r6tose82rdrrrj.png)

I found this while doing research on this topic, The 12 Month Strategy is basically you spacing out the steps you want to take in building a brand for yourself into 12 steps which you can take on one step every month. This is a flexible strategy where you can pick to do whatever you want to at any point and even decide to space into 6 months anything that works for you is great.


## Benefits of Owning A Brand
We have seen how to build your brand and sustain it, Now let's take a look at some benefits of owning a brand.

![benefits](https://thepracticaldev.s3.amazonaws.com/i/c92d50wzk7hxgz4x5bfg.png)

- **Increase Your Network** Building a brand for yourself often requires you interact with other people in the same industry as you and by so doing you get to create a network of individuals that will play a significant role in your career and also make an impact in your brand so this should not be taken for granted.
- **Job Opportunities:** I often think this is one of the benefits of having a personal brand because your brand can bring about different opportunities including great job offers as far as you're creating value and making an impact, people will want to work with you.
- **Influence:** Finally, I think this benefit will come without a doubt when you build a brand for yourself you are indefinitely creating a voice for yourself in the community and that is because of the valuable impact you're making.


## Tips To Apply When Building A Brand
![tips](https://thepracticaldev.s3.amazonaws.com/i/kaw1y14nbk49urzrkc2q.png)

- Stay Consistent
- Create Valued Content
- Join or Build Communities
- Share Your Work
- Create a Space For Yourself

I hope you take out one or two tips from this article, let me know if there are other tips you have tried that helped you by reaching out to me on twitter [@lauragift21](https://twitter.com/lauragift21)

[Here's a link to the slides for my talk.](https://speakerdeck.com/lauragift21/building-a-killer-personal-brand)
]]></content:encoded></item><item><title><![CDATA[Love At Second Sight With TailwindCSS]]></title><description><![CDATA[I recently checked out TailwindCSS a utility-first CSS framework and I share my thoughts about it and how to get started with it in your project.]]></description><link>https://giftegwuenu.com/love-at-second-sight-with-tailwind-css/</link><guid isPermaLink="true">https://giftegwuenu.com/love-at-second-sight-with-tailwind-css/</guid><pubDate>Wed, 29 May 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[<!-- ![banner](https://res.cloudinary.com/practicaldev/image/fetch/s--HzMShc7o--/c_imagga_scale,f_auto`,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/rbaft4bt2unw0yln27uj.png) -->

Imagine my thoughts when I first saw the TailwindCSS Framework, in my head I already thought this was one of the usual frameworks like Bootstrap, Bulma, and Foundation, etc that I have tried using before and I took my eyes off it for a second. Until recently I decided to give it another look after I saw the recent release of v1 and to my greatest surprise, I fell in love with TailwindCSS. In this article, I’ll be introducing you to TailwindCSS and why I think it is a different ball game entirely with useful examples. Let’s get right into it, shall we?

![tailwind](https://res.cloudinary.com/lauragift/image/upload/v1558984626/image_preview_s8bbns.png)

## Introduction

[TailwindCSS](https://tailwindcss.com/) is a utility first CSS framework for building custom user interface designs. It is a highly customizable, low-level CSS framework that gives you all of the building blocks you need to build bespoke designs without any annoying opinionated styles you have to fight to override.

## Why TailwindCSS?

One of the common reasons why I think I got love struck with TailwindCSS is that I found out I can get the following out of the box:
- **Customization on the fly:** Tailwind is easily customizable to fit your needs. You can customize your own colors, border-sizes, shadows, spacing and a whole lot more. You're the limit as far as customization is concerned with TailwindCSS.
- **Component-friendly:** TailwindCSS is also a component friendly CSS framework, what this means is that instead of having repeated utility classes for your UI, you can combine common patterns and abstract it out as component classes that eventually become reusable.
- **Responsive to the Core:** TailwindCSS comes bundled with responsive variants for different screen sizes that can be adopted in your UI by only prefixing the screen size to the class.



### Getting Started

To get started with TailwindCSS in your project you will need to install it as a dependency or you can use it as a CDN. But mind you it's not a recommended choice to use the CDN option because some features that make tailwind awesome won't be available for use.

```html
// using CDN
<link href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css" rel="stylesheet">

```

```bash
# using npm
npm install tailwindcss -save-dev or

# using yarn
yarn add tailwindcss --dev

```
After installation, we will need to inject tailwind's styling into our CSS using the `@tailwind` directive. So let's go ahead and add Tailwind's base, components, and utility styles into our `styles.css`


```css
@tailwind base;

@tailwind components;

@tailwind utilities;

```
>With the recent release of `v1.0`, the good news is we won't need to create `tailwind.config.js` file anymore as this is now optional.

## Using TailwindCSS CLI
Now, we can use tailwind's CLI to build out our CSS into tailwind's styles using the command below.

```bash
npx tailwind build style.css -o output.css

```

The tailwind command is simply taking our default CSS file `style.css` as the input and processing the styles into `output.css` as the output file.

Instead of using `style.css` as the stylesheet in our HTML you can now use `output.css` to ensure tailwind styles are being applied to our HTML content.

```html
  <link rel="stylesheet" type="text/css" href="output.css">

```

Let's now go ahead and create some examples that we can utilize to explore the capabilities of TailwindCSS. We can also spin up tailwindcss on codepen or have it on our local computer whichever one works for you.

## Example 1: Creating a Card
Let's create a card using TailwindCSS and see how seamless this process is without writing any line of CSS.

```html
<div class="mx-auto my-3 max-w-md rounded overflow-hidden shadow-lg">
  <img src="https://images.unsplash.com/photo-1557310717-d6bea9f36682?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&h=400&w=634&q=80" class="w-full" alt="a platter of cookies">
 <div class="px-6 py-4">
  <div class="font-bold text-xl mb-2">Chocolate Chip Cookies</div>
  <p class="text-base text-gray-700">
         Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus quia, nulla! Maiores et perferendis eaque, exercitationem praesentium nihil.
  </p>
 </div>
 <div class="px-6 py-4">
  <span class="inline-block bg-gray-300 px-3 py-2 text-sm font-semibold mr-2 text-gray-700 rounded-full">
   #photography
  </span>
   <span class="inline-block bg-gray-300 px-3 py-2 text-sm font-semibold mr-2 text-gray-700 rounded-full">
   #food
  </span>
   <span class="inline-block bg-gray-300 px-3 py-2 text-sm font-semibold text-gray-700 rounded-full">
   #cookies
  </span>
 </div>
 </div>

```
![card](https://thepracticaldev.s3.amazonaws.com/i/0sxm0lavhep6rxvaufk0.png)

## Example 2: Custom Buttons

The second example we'll be looking at is how to create buttons using TailwindCSS.


```html
<button class="bg-blue-400 text-white font-bold py-2 px-5 rounded my-2">Button</button>
<button class="bg-red-600 text-white font-bold py-2 px-5 rounded my-2">Button</button>
<button class="bg-gray-600 text-white font-bold py-2 px-5 rounded my-2">Button</button>
<button class="bg-green-500 text-white font-bold py-2 px-5 rounded my-2">Button</button>

```
![button](https://thepracticaldev.s3.amazonaws.com/i/lisvz2yc589jn50xht4e.png)

I absolutely enjoyed playing around with the docs to create these examples and one thing you can also leverage is extracting utility classes as a component.

## Extracting Utility Classes as Components
You can additionally extract utility classes as a component as I mentioned earlier. Tailwind advocates for `Utility-first` workflow but when you find out that you're reusing the same styles over again then this is when you should think of extracting them into components. Here's how to accomplish just that.

From example 2 above, We can further reduce the number of utility classes by extracting it out as a component using `@apply`.

```html

<button class="btn btn-blue">
  Button
</button>
<button class="btn btn-gray">
  Button
</button>


<style>
.btn {
  @apply text-white font-bold py-2 px-4 rounded my-2;
}
.btn-blue {
  @apply bg-blue-500;
}
.btn-blue:hover {
  @apply bg-blue-700;
}
.btn-gray {
  @apply bg-gray-500;
}
.btn-gray:hover {
  @apply bg-gray-700;
}

</style>
```

And you still get the same result but with a lot, fewer utility classes applied. Note that variants like `hover:`, `focus:,` and `{screen}:` can't be applied directly, so instead apply the plain version of the utility to the appropriate pseudo-selector or media query.

I absolutely had fun exploring TailwindCSS and I can't wait to work with it in my projects. Have you tried TailwindCSS or used it in a project? What are your thoughts about it?.
]]></content:encoded></item><item><title><![CDATA[How To Supercharge Your Productivity As A Developer]]></title><description><![CDATA[I gave a talk about this topic a couple of months ago at forloop Summit Lagos, Nigeria. I decided to write a blog post out of it so here it goes.]]></description><link>https://giftegwuenu.com/how-to-supercharge-your-productivity-as-a-developer/</link><guid isPermaLink="true">https://giftegwuenu.com/how-to-supercharge-your-productivity-as-a-developer/</guid><pubDate>Fri, 24 May 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
**I gave a talk about this topic a couple of months ago at forloop Summit Lagos, Nigeria. I decided to write a blog post out of it so here it goes.**

As developers, we are constantly trying to churn out work and we often find ourselves distracted from doing the actual work. In this article, I'll be sharing tips on how you can stay productive as a developer and also share tools to help automate this process.

## What is Productivity?

Productivity is an act of getting quality work done without the need for adding extra effort.

This is my definition of productivity and I am sure a lot of developers are already familiar with the term productivity. Daily in our lives, we all try to churn out meaningful work, tick that task off our to-do list and the cycle continues. One hard truth I'll like us to think about is how many developers around the world actually struggle with being unproductive daily due to different circumstances.

![fun fact](https://res.cloudinary.com/lauragift/image/upload/v1558652153/_HOW_TO_SUPERCHARGE_YOUR_PRODUCTIVITY_AS_A_DEVELOPER_ywdakh.png)

Here's a fun fact. I think this is the case for most developers we don't work actively for straight 8 hours mind you if you do this then it's totally fine, this is just my point of view because I know in order to work efficiently you need breaks so please don't come for me :).


## Causes Of Low Productivity

![causes](https://res.cloudinary.com/lauragift/image/upload/v1558652550/5_zpgqwq.png)

I'll be brief and butcher these points on why I think these are some causes of low productivity for developers.

- **Distractions:** Our phone notifications, unread emails, and meetings are some of the biggest distractions that can cause us to be less productive during our working hours. I personally turned off notifications from all my devices when working yet there's still an urge to pick up my phone while working.

- **Low Work-Life Balance:** Burnout is real, when you spend your time working past your usual hours or when you are supposed to spend time away from work this will eventually lead to low productivity because all you eventually concerned about is work and the other part which is You is lacking.

- **Unhealthy Company Culture:** An unhealthy company culture can also trigger low productivity in several ways. Working in a toxic environment significantly affect developers. People have to deal with some unpleasant scenario at the workplace and this tends to affect the quality of work they produce.

- **Stress:** Learning when to take a break is also key, A lot of developers are guilty of this act. If you overwork yourself you become stressed and that eventually leads to low work output and lack of productivity.

- **Lack of Growth Opportunities:** Working at an organization that doesn't align with your goals or you are in a position where you keep doing the same task over and over without learning anything new or you don't see your self getting that promotion anytime soon then that can cause low productivity towards your work output.

## Recommended Tips To Supercharge Your Productivity

- **Minimize Distractions:** The best way to get rid of distractions is by restricting it entirely. What this means is you'll have to figure out ways to reduce the notifications and email you get. You can either mute notifications on your mobile devices or make sure you don't have it close to you when working. Use whatever works for you but the goal is to reduce distractions. Some tools that can help you are [Stay Focused](http://www.stayfocusd.com/), [Self Control for Mac](https://selfcontrolapp.com/), [gofuckingwork](http://gofuckingwork.com/).
- **Automate Your Process:** As developers, this is one of the things I think we should be interested in because repeating a task can become daunting when we can automate it then why not. If you figure out you spend more than 2 minutes doing the same thing every day then you should find a way to automate that task. Tools for automating your process. [.dotfiles](https://dotfiles.github.io/), [ohmyzsh](https://ohmyz.sh/), [cheatsheet](https://mediaatelier.com/CheatSheet/).
- **Time Management:** Managing your time is another important tip you can leverage to stay productive. when you plan ahead efficiently it'll help boost your productivity. Some tools to leverage [Tomato Timer](https://tomato-timer.com/).
- **Work With Right Tools:** It's important to work with the right tools, this way we don't spend a lot of time figuring out why the task we are trying to complete is not working as expected when we are using the wrong tool.
- **Take Breaks and Rest:** This is as necessary as every other tip I've shared. Take breaks when you need to and rest. If there's anything I've learned then it is I and my life comes first before any work because at the end if you're not healthy you won't be able to the work eventually.
- **Prioritize Your Work:** This works for a couple of people, in fact, I've tried it and I saw the need to use this technique. Making sure to prioritize our work is one way to improve your productivity. You can either choose to do the hard and time-consuming task first and then do the easy ones last or vice versa whichever works for you but make sure you prioritize.
- **Plan Ahead With Note Taking:** I love note taking it's a habit for me and I've found that it's one way the works for me I take notes of what I want to accomplish for the day and at the end of the day I can visualize the amount of work I've been able to achieve. I must confess on some days this gives me chills and goosebumps other days I'm disappointed but still, I don't give up. Tools I use [Notion](https://www.notion.so/), [Numi](https://numi.io/), [Taskade](https://www.taskade.com/).
- **Break Tasks Into Chunks:** I can't emphasize this enough make sure you break up your tasks into smaller chunks that way you're able to visualize them in bits size and it doesn't become overwhelming for you to achieve.
- **Schedule Your Time:** Lastly, use your calendar. Schedule activities for the week so that you don't skip or forget things you're supposed to do. Personally, I use [Google Calendar](https://www.google.com/calendar)


## How Do You Define Success?

After going through these steps and applying these tips, how do you know when you've succeeded.

![success](https://res.cloudinary.com/lauragift/image/upload/v1558654196/13_wzuy0r.png)


- **Improved Time Mangement:** You know you've succeeded when you can now effectively manage your time and stick to it and there's a noticeable improvement in the work you churn out.
- **Gain Focus And Stability:** You are now very focused and stable because you have dedicated time to rest and take breaks so you feel refreshed when working.
- **Career Advancement:** The amount of valuable work you achieve now leads to possible promotion including better opportunities.
- **Work-Life Balance:** You now have proper work-life balance, no signs of burnout and you can take time outside work to go on a vacation or spend time with family.


I hope you found these few tips helpful and you can start using them in your daily workflow to improve your productivity as a developer.

[You can find the talk slides here](https://speakerdeck.com/lauragift21/how-to-supercharge-your-productivity-as-a-developer)

]]></content:encoded></item><item><title><![CDATA[A Practical Guide To Optimizing Performance On The Web]]></title><description><![CDATA[The web is continuously evolving and today we have millions of sites on the web and several users consuming these content. In this article, I'll be outlining performance tips we can leverage in optimizing our websites. ]]></description><link>https://giftegwuenu.com/a-practical-guide-to-optimizing-performance-on-the-web/</link><guid isPermaLink="true">https://giftegwuenu.com/a-practical-guide-to-optimizing-performance-on-the-web/</guid><pubDate>Tue, 07 May 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
The web is continuously evolving and today we have millions of sites on the web and several users waiting to load these sites for one reason or another. There’s nothing more frustrating when you have to wait for a page to load for more than the expected time required due to slow internet connection or unforeseeable reasons. According to this [study](http://Statisticbrain.com), An average users attention span only lasts for about eight seconds. So imagine if you have to wait for about three minutes before a sites loads, That automatically means with crappy performance on any website the adoption of users will eventually decline and that’s not what we want to achieve. 
Web Performance is the speed in which it takes for web pages to get downloaded and displayed on the user's web browser.

## Why Performance Matters?

Web performance is a rather interesting topic if you ask me, I think it is one of the things developers should be more focused on because, at the end of the day, we are building the web so it can be accessible to all our users regardless of any obstacles or challenges. Today, a lot of users browse the internet with 2G, 3G, 4G, and LTE connections and we are still expected to serve the web to them at the same speed. Performance is necessary and important for our users because of these reasons.

- Our users are our priority and they are the reason why we are building in the first place. Without users visiting the webpages I’m sure there won’t be any reason to create it at first. So because we are building for the users they should also be considered at every step of development and our number one goal should be that they are able to conveniently use the websites we build.
- Incrementally improve conversion rates. When we build websites that are fully optimized for speed and usage then we’ll see a huge retention rate because users will continue using your site because they had a great experience the first time they visited. But the opposite will be the case if your website performance is not optimized. 

So how do we make sure our users are happy using our sites and will gladly return back after using it because they love it and the performance is great? I’ll be outlining some tips and steps we can take to build faster web experiences for all our users.

### Tips For Improving Web Performance
1. **Fewer HTTP Requests:** There are several cases, where a huge portion of website load times is generated from external HTTP requests. The speed at which external resource loads can vary depending on the hosting provider’s server infrastructure or location. The general goal here is to make sure we can reduce the external HTTP requests so we need to examine the requests and eliminate any resource that is not adding any benefits to user experiences such as unnecessary images,  unnecessary JavaScript and CSS code.
    
2. **Code Splitting and Tree Shaking:** Code Splitting and Tree Shaking is another technique used in improving performance. How do we code split or tree shake right? This is done by using packages like Webpack, Rollup in development. Code Splitting is a feature that allows you split your code into various bundles or components which can then be loaded on demand or in parallel on the other hand Tree Shaking is a concept that involves the elimination of unused or dead code.  

3. **Lazy Loading:** Lazy loading is a web performance pattern that delays the loading of images in the browser until the user needs to see it and it is a great way to optimize performance. It ensures your site isn’t bloated, and your users can quickly download the images they want to see.
    
4. **Defer Scripts:** Deferring a script means preventing it from loading until after other elements have loaded. When you defer larger files, like JavaScript, you ensure that the rest of your content can load without a delay caused by waiting for the larger files to load. The syntax for this is indicated by adding defer in a script tag. 

```html
<script defer></script>
```

5. **Optimize Images:** It is important to optimize images on the web. According to the HTTP Archive, [61 percent of a website’s page weight](http://httparchive.org/interesting.php#bytesperpage) on the web is images. Now we don’t want all our images taking up all the space when we have other content to display too right. There are some ways we can further leverage to optimize images on the web.  
 - Using a Service like Cloudinary: [Cloudinary](https://cloudinary.com) is a platform that you can use to manage all your images and videos. It does the heavy lifting for you so you don’t have to bother about the size of images you currently have on your website. It comes bundled with features like Image Optimization, Image Manipulation, Responsive Images, and Image Delivery out of the box.
        
6. **CDN’s to the Rescue:**  We can significantly optimize page load times on our websites by using a Content Delivery Network. A CDN can be used to store resources like images and videos we will usually load directly into the webpage. When you use a [CDN](https://www.keycdn.com/what-is-a-cdn), you link your website’s static content to an extended network of servers across the globe. The CDN allows your site’s visitors to load data from their nearest server. If you use a CDN, your site’s files will automatically be compressed for rapid delivery across the globe. [Cloudinary](https://cloudinary.com) is an example of CDN that can be used in this case.
    
7. **Enable Caching:** Caching is a technique used for temporarily storing web pages in order to reduce bandwidth and improve performance. When a user visits your site and the page is cached, the same cached page will be served to the user when he revisits again unless it has changed since the last cache. This saves the user the time they have to wait for the page to be loaded and makes things faster. arrives at your site the cached version will be served up unless it has changed since the last cache. This saves server time and makes things altogether faster.

8. **Prefetch Resources:** Prefetching can improve your user’s browsing experience and significantly improve performance by fetching the necessary resources and related data **before they are needed**. There are 3 main types of prefetching:
- **Link Prefetching:**  If you are sure that a user will click on a specific link to navigate to some page, you can apply this type of prefetching. The method is useful for stable user journey actions, like moving to the shopping cart page after one or several items were added. 
```html
<link rel="prefetch" href="/img/cat.png">
```
- **DNS Prefetching:** This allows the browser to resolve domains into IP addresses in advance. This minimizes latency as when the user clicks on a link with DNS prefetch enabled, they do not have to wait for the DNS lookup to take place as it already has.  
```html
<link rel="dns-prefetch" href="https://www.keycdn.com">
```
- **Prerendering:** This approach means rendering an entire page or some elements of it in advance. 
```html
<link rel="prerender" href="/second-page.html">
```
    
## Tools For Measuring Speed On The Web

It is important for us to know how to measure the speed for our websites as well as improve the speed if we are not satisfied with the current page speed. We can do this by making use of dedicated tools available for testing speed. Some of which include.

- [**WebPagetest**](https://www.webpagetest.org)
- [**Pagespeed Insights**](https://developers.google.com/speed/pagespeed/insights/)
- [**Lighthouse**](https://web.dev/measure)
- [**KeyCDN Speed Check**](https://tools.keycdn.com/speed)

## Conclusion

Web Performance optimizations can significantly improve the user experience on webpages and it is getting more and more important for web development as applications get bigger and more complex. The one thing we should always take note of as developers is that we are building for the users and we should make sure we prioritize them and their needs when building websites.

]]></content:encoded></item><item><title><![CDATA[An Introduction To Storybook]]></title><description><![CDATA[Storybook is an open source tool for developing UI components in isolation and it integrates pretty well with most front end frameworks including React, Vue, and Angular and a host of other frameworks.]]></description><link>https://giftegwuenu.com/an-introduction-to-storybook/</link><guid isPermaLink="true">https://giftegwuenu.com/an-introduction-to-storybook/</guid><pubDate>Thu, 25 Apr 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
Storybook is an open source tool for developing UI components in isolation and it integrates pretty well with most front end frameworks. I wrote an article on [Scotch.io](https://scotch.io) titled [An Introduction To Storybook: Organize How You Build JS Components](https://scotch.io/tutorials/an-introduction-to-storybook-organize-how-you-build-js-components)

![Storybook](https://scotch-res.cloudinary.com/image/upload/w_1000,q_auto:good,f_auto/v1554737505/li5k7lqzq32ipy3cs0xy.png)]]></content:encoded></item><item><title><![CDATA[Top 15 Visual Studio Code Extensions in 2019]]></title><description><![CDATA[As a developer, you want to be efficient with your time and automate where you can. Here are 15 VS Code extensions you should be taking advantage of today.]]></description><link>https://giftegwuenu.com/top-15-visual-studio-code-extensions-in-2019/</link><guid isPermaLink="true">https://giftegwuenu.com/top-15-visual-studio-code-extensions-in-2019/</guid><pubDate>Fri, 12 Apr 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
I wrote an article for [Telerik](https://www.telerik.com/blogs) about the top 15 VS Code extensions we can start using in 2019 that'll boost our productivity as developers.

[Top 15 Visual Studio Code Extensions in 2019](https://www.telerik.com/blogs/top-15-visual-studio-code-extensions-in-2019)

![Image](https://d585tldpucybw.cloudfront.net/sfimages/default-source/blogs/templates/opiniont-light_870x220.png?sfvrsn=7d9cd386_2)]]></content:encoded></item><item><title><![CDATA[Guide to using Alternative Text on Images]]></title><description><![CDATA[In this article, I'll explain the importance of adding alternative text to image element and how this practice  can improve accessibility]]></description><link>https://giftegwuenu.com/guide-to-using-alternative-text-on-images/</link><guid isPermaLink="true">https://giftegwuenu.com/guide-to-using-alternative-text-on-images/</guid><pubDate>Mon, 01 Apr 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
Today, A lot of developers are conversant with the `alt` attribute on images. I can say most of us know that it is one way of making webpages accessible but do we really understand the scope of the alternative text, when to make use of it, how to use it. I agree it is one step to being an accessibility advocate so that is why in this article, I'll be explaining in detail the alt attribute and how practicing it can improve web accessibility in a long run.  

Truthful confession here, before I became really involved with accessibility I didn't understand the importance of having a descriptive text for all images on the web. I'm mostly guilty of leaving the `alt` attribute blank. Now that I know better I can't keep it to myself which is one of the reasons I'm writing this article to share this new knowledge gained with everyone.

## What is Alternative Text?
Alternative text or alt text as it is fondly called is a written text description for an image on the web.
Alt text is really useful and can come in handy in any of these scenarios:
- people using assistive technology such as screen readers and so on.
- people that have images turned off on their devices due to a poor internet connection.
- it helps improve SEO for the webpage.

Writing good alt text for images is very important and shouldn't be sidelined. To show how important this is the Web Content Accessibility Guidelines document [WCAG 2.1](https://www.w3.org/TR/WCAG21/#text-alternatives) have it has the first rule which shows that it's really important.

> Guideline 1.1 Text Alternatives: Provide text alternatives for any non-text content so that it can be changed into other forms people need, such as large print, braille, speech, symbols or simpler language.

## How to Use Alt Text
Typically, when adding an image to a webpage, we use the HTML image element to represent the image and the alt attribute on the image tag to give a description of the image. Here's an example:

![girl holding burger](https://res.cloudinary.com/lauragift/image/upload/v1554123305/photo-1551212721-f0d4160f0abd_fxpx0w.jpg)


```html
<img src="./burger.png" alt="A girl holding a hamburger.">
```
The above alt attribute describes the context of the image. In this case, if a screen reader is being used on this page. It'll read the alt text instead and the user gets a very descriptive context of the image used.
There are other things to consider when writing alt text this is just a primer to writing descriptive alternate text for images. I'll be going over the important concepts to take note of when using images on the webpages.   
All images on the web must have alternative text that describes the function of the image. 
There are seven concepts for using images on the web I'll be outlining each of them and they include:

1. **Informative Images:** Informative images are images that describe a piece of information or concept. The information described can be anything from an emotion/impression to a label or the file format used in a link. The text alternative for an informative image should convey the meaning or content of the image. Here's an example:

![girl smiling happily](https://res.cloudinary.com/lauragift/image/upload/v1554128116/photo-1492633423870-43d1cd2775eb_xgcd0p.jpg)

```html
<img src="./girl.png" alt="A girl smiling happily.">
```
The image illustrated above shows the emotion of a girl. The idea therefore, is to make the alternative text convey this information.

2. **Decorative Images:** Decorative images are images that don't necessarily convey meaning or information. These images don't add information to the content of the page mainly because the content description is already provided or the image is used for styling purposes. Therefore, the `alt` attribute is not provided or left empty `(alt="")`. The reason for this is to avoid assistive technologies such as screen readers from reading a redundant text to its users. Leaving the `alt` attribute out entirely is not a good practice because some screen readers will announce the file name of the image instead. An example is shown below:

```html 
<img src="./line.png" alt="">
```
3. **Functional Images:** Functional images are images that convey an action to be taken rather than informative images that only conveys the information of the image. They are mostly used in links, buttons, and other interactive elements. The alternative text should convey the action to be taken rather than the description of the image. For example, having an alternative text that says `search list` instead of `a microscope` or `print page` instead of `image of a printer`. Having an empty `alt` attribute won't be helpful too because you want to be able to notify users using screen readers to navigate your site that you want them to take an action at that point. Here's an example:

![search](https://res.cloudinary.com/lauragift/image/upload/v1554130730/how-to-search-gmail_etobms.jpg)
```html
<input type="image" src="search.png" alt="search this page">
```
4. **Images of text:** Images of text like the name implies is describing the text illustrated in an image. This is rarely used because with most modern browsers we can use CSS to style text to look exactly the way we want it rather than using images to represent text. Using text instead of images to display content has more advantages as the text can easily be scaled or resized without losing clarity but with images, the text becomes distorted and loses image quality. In the event that the only possible option available is to use images to describe a text then the alternative text must also contain the text in the image. For example, we can have:

![](https://res.cloudinary.com/lauragift/image/upload/c_crop,h_111/v1554131437/Screen_Shot_2019-04-01_at_4.10.10_PM_mkphqf.png)
```html
<img src="text.png" alt="For sale: baby shoes, never worn.">
``` 
5. **Group of Images:** This type of images represent images that are grouped together to convey a single piece of information. An example can be a collection of heart icons to represent a rating. When adding descriptive text for each image, the alt attribute for only one of the image should have a description of the group of images, while the other images have an empty `alt` attribute so they are ignored by screen readers. Here's an example:

![heart](https://res.cloudinary.com/lauragift/image/upload/v1554132040/lLdzWnJ_v1o7ie.png)

```html
<img src="full-heart.png" alt="1.5 of 3 hearts">
<img src="half-heart.png" alt="">
<img src="empty-heart.png" alt="">
```

6. **Complex Images:** Complex images convey a very detailed and substantial amount of information. These type of images ranges from graphs to bar charts, maps showing locations and diagram or illustration, etc. In these cases, two text alternative description is provided. The first one being the short description of the image. The second is the long description of the image to fully explain the information conveyed by the image. Here's an example:

![image](https://res.cloudinary.com/lauragift/image/upload/v1554132643/count-vs-animals_kjpeh5.png)
```html
<figure role="group">
  <img src="bar.png" alt="Bar chart showing population of animals in SA and LA zoos.">
  <figcaption>
    <p>The bar chart shows a population of the animals in South African Zoo compared to Los Angelos Zoo. With the number of giraffes, monkeys and orangutans compared in both zoos.</p>
  </figcaption>
</figure>
```

7. **Image maps:** Image maps are images that have been divided into various regions, each region represented by the `area` elements. An example can be an organizational chart. Image maps are created using `<img>` and `<map>` elements. The text alternative is needed on both the `img` elements and each `area` element. The example below illustrates an organization chart with each node represented to identify an individual in the organization.


![map](https://res.cloudinary.com/lauragift/image/upload/v1554133167/orgchart-b583d8ff_b3fqaw.png)

```html
<img src="orgchart.png"
     alt="Board of directors and related staff: "
     usemap="#Map">
<map name="Map" id="Map">
	<area
		shape="rect"
		coords="176,14,323,58"
		href="…"
		alt="Davy Jones: Chairman"
	>
 ...
</map>
```

With all these images types listed, how do you know which one to use when implementing alt text. [The Alt decision tree](https://www.w3.org/WAI/tutorials/images/decision-tree/) is a guide provided to help you make that decision. So when in doubt use the alt decision tree.

## Tips To Note When Writing Alternative Text
- End the alt text with a full stop. This will make the screen readers pause for a bit before reading other content. which improves the experience for the user.
- Don't start alt text with `image of` or `photo of`.
- Be specific when describing the image.
- Avoid cramping in keywords for SEO purposes.
- Don't add line breaks in the `alt` text. This can cause a weird pause when the screen reader is describing the image.
- Use the empty `alt` attribute `alt=""` for decorative images. for example, the background image of a website because understanding the context used here is not required.
## Conclusion
In this article, I've explained in detail the benefit of using alternative text for images and how to go about using them in a different context. I'm happy you read this far and my ask therefore is not to only read this but also learn to practice it. I believe the web will become more accessible with a collective effort from everyone.]]></content:encoded></item><item><title><![CDATA[Web Accessibility For Beginners]]></title><description><![CDATA[Building accessible applications or websites is not the norm today. This is because the idea of accessibility is known to most developers, while in actual sense it is often neglected and not a common practice today in the world of web development.]]></description><link>https://giftegwuenu.com/web-accessibility-for-beginners/</link><guid isPermaLink="true">https://giftegwuenu.com/web-accessibility-for-beginners/</guid><pubDate>Fri, 22 Mar 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
I wrote an article on [Web Accessibility for Beginners](https://scotch.io/tutorials/web-accessibility-for-beginners) on [Scotch.io](https://scotch.io). This article explains what web accessibility is about, ways we can adopt accessibility as developers and tools we can leverage in building accessible application and websites.

![scotch](https://scotch-res.cloudinary.com/image/upload/w_1000,q_auto:good,f_auto/v1552983314/zqxrypezsripoquvhfsq.png)]]></content:encoded></item><item><title><![CDATA[Tree-Shaking Basics for React Applications]]></title><description><![CDATA[Tree-shaking is an important way to reduce the size of your bundle and improve performance. See how you can do it in your React apps.]]></description><link>https://giftegwuenu.com/tree-shaking-basics-for-react-applications/</link><guid isPermaLink="true">https://giftegwuenu.com/tree-shaking-basics-for-react-applications/</guid><pubDate>Wed, 13 Mar 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
I wrote an article on how tree shaking works in React on [Telerik Blog](https://www.telerik.com/blogs/tree-shaking-basics-for-react-applications), I explained the concept of tree shaking, why tree shaking is needed and how it works in Webpack and Rollup.

[Tree Shaking Basics for React Applications](https://www.telerik.com/blogs/tree-shaking-basics-for-react-applications)

![REACT](https://d585tldpucybw.cloudfront.net/sfimages/default-source/default-album/reactl_870x22043ebae8e03574d828cb4ca1b953be368.png?sfvrsn=d1068b5a_1)]]></content:encoded></item><item><title><![CDATA[Getting Started with Gridsome]]></title><description><![CDATA[The era of Static Site Generators is changing over time, a lot of cool tools are being created to help foster the JAMStack evolution and developers are embracing these tools. One of the tools for creating blazing fast websites is Gridsome.]]></description><link>https://giftegwuenu.com/getting-started-with-gridsome/</link><guid isPermaLink="true">https://giftegwuenu.com/getting-started-with-gridsome/</guid><pubDate>Tue, 12 Mar 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
I wrote an article on how you can get started with [Gridsome](https://gridsome.org/) on [Scotch.io](https://scotch.io), a static site generator for building blazing fast websites and web apps with Vue.js.

[Getting started with Gridsome](https://scotch.io/tutorials/getting-started-with-gridsome)

![Gridsome](https://scotch-res.cloudinary.com/image/upload/w_1000,q_auto:good,f_auto/v1550070821/v8tpfdxfbmh1dnswzezv.png)]]></content:encoded></item><item><title><![CDATA[Migrating to Gridsome from Hugo]]></title><description><![CDATA[I recently moved my blog from Hugo to Gridsome static site generator. its great to adopt change I did because I wanted a more flexible solution and Gridsome offers that and more.]]></description><link>https://giftegwuenu.com/migrating-to-gridsome-from-hugo/</link><guid isPermaLink="true">https://giftegwuenu.com/migrating-to-gridsome-from-hugo/</guid><pubDate>Mon, 04 Mar 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[I was going through my twitter timeline last week and I stumbled on this tweet. And after checking out gridsome-starter-blog I decided to make the switch.

https://twitter.com/gridsome/status/1101282439320797187?ref_src=twsrc%5Etfw

## Why I Made The Switch?

I was pretty comfortable with the design of the previous blog I had, I also like using Hugo this post is not to bash Hugo 😄. I wanted flexibility and since I couldn't get that with my previous blog I decided to make the switch. I'm currently using the official [Gridsome Blog Starter](https://github.com/gridsome/gridsome-starter-blog), I just tweaked a few things and added a couple of features I require that was not in the starter.

In this post, I'll be highlighting how I made the switch and also add details of features I added to support my personal blog. Let's get started, shall we?

## Introducing Gridsome

![Gridsome homepage](https://res.cloudinary.com/lauragift/image/upload/v1581599653/Screenshot_2020-02-13_at_2.12.18_PM_sxuz2r.png)

[Gridsome](https://gridsome.org) is a Vue-powered static site generator for building blazing fast websites and Apps. Its a Vue alternative to Gatsby. I mostly like Gridsome because of its supports for GraphQL as a single source of truth for its data layer, allowing you connect to any headless CMS or external API like Google sheets, Airtable, local markdown files etc.\
When I was using Hugo it was stress-free I was able to find my way around the codebase with little knowledge of Go programming language because Hugo was built using Go. But I've found that its a bit tricky when I need to add extra features that are not present in the template I was making use of. So really It wasn't that flexible for me. I've been having an issue with syntax highlighting and when I tried to fix this recently it was a disaster. So before I moved I weighed down the pros and cons of moving will my readers still recognise my blog when they visit?  I did make the move anyway.

## Content Migration

Moving my content from Hugo to Gridsome was not that difficult because they are just markdown files and in Hugo I had my content in `content/post` and luckily enough Gridsome had the same directory. The only thing I had to do was format the frontmatter to fit Gridsome's format. One thing I really liked is the starter I'm currently using adopted [Dev.to](dev.to) frontmatter format and I'm a constant user of Dev so this was also easy for me to adopt.

## Customizing the Starter

This was really fun because the Gridsome team really made this a great starter. Some of the features supported already includes tags, dark/light toggle, beautiful and minimalistic UI and markdown support. These are the steps I took in installing and using this starter.

I created a new Gridsome project using these commands:

```
<!-- install gridsome globally -->
npm install --global @gridsome/cli

<!-- Then clone the starter repo -->
gridsome create gridsome-blog https://github.com/gridsome/gridsome-starter-blog.git

<!-- navigate to the directory -->
cd gridosme-blog

<!-- run the app on your local server -->
gridsome develop
```

There you have it! 🎉 We've just created a Gridsome blog.

## Integrating Additional Features

I had to make some additional changes to this blog because a couple of integration I needed was not available. By default, you get gridsome/source-filesystem and gridsome/remark-prismjs. But I needed to add additional features like 

* Google Analytics Support
* Disqus for commenting
* Newsletter
* About Me Page
* Share on Twitter functionality
* RSS Support
* Twitter Embed Support

 I've been able to add a few of these already. I was lucky to get Google analytics plugin already available so I only needed to install it. For Disqus I installed a package called `vue-disqus` and migrated the form I used for the newsletter over to this new blog only needed to tweak some styling so it fits this new layout.  This blog is still a work in progress as I add the other features I have pending. Overall so far moving to Gridsome has been great!

## Deploying

I used Netlify for hosting the previous blog and configured it to use a custom domain. I recently bought [giftegwuenu.dev](giftegwuenu.dev) and just make it redirect to [giftegwuenu.com](giftegwuenu.com). Switching from the previous blog to this was really quick because with Netlify you already have a domain assigned to any projects you create. So I deleted the custom domain from my previous blog and added it to this new one. And it worked pretty seamlessly. Netlify is Bae 💚  

![netlify](https://res.cloudinary.com/practicaldev/image/fetch/s--u0zM2jbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lauragift/image/upload/v1551708884/Screen_Shot_2019-03-04_at_2.50.52_PM_h7seox.png)

## Conclusion

Making this move wasn't as daunting as I thought it'll be. I'm happy I was able to do this and now I can play with Vue a framework I'm more familiar with as compared to when I was using Hugo and have to understand Go to make additional implementation changes. I'm now going to focus on creating content and don't worry I'm not switching anytime soon.

If you have a question regarding JAMStack, Gridsome or why I switched you can reach out to me on twitter [@lauragift](www.twitter.com/lauragift21)_
]]></content:encoded></item><item><title><![CDATA[My Workflow And Tools That Help Me Speed Up Productivity]]></title><description><![CDATA[In this post I’ll outline the tools I use for my day to day activities.]]></description><link>https://giftegwuenu.com/my-workflow-and-tools-that-help-me-speed-up-productivity/</link><guid isPermaLink="true">https://giftegwuenu.com/my-workflow-and-tools-that-help-me-speed-up-productivity/</guid><pubDate>Sun, 17 Feb 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[# My workflow and Tools that help me Speed Up Productivity.

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550400798183_designing+a+scandinavian-style+home.png)

Nearly every developer works with different tools on a daily basis to help them achieve their goals or complete specific tasks. In this post, I’ll outlined the tools I use for my day to day activities.

First thing I’ll like to do is define workflow.

## What is a Workflow?

A workflow is a series of event or task that processes a set of data. Workflows occur across every kind of business and industry. They are the paths that describe how something goes from being a work in progress to complete or raw to processed. For example I have a workflow for writing articles, from finding ideas of posts to creating an outline and then writing the actual content of the post to publishing all these are series of event to achieving a task.

As a developer, I tend to make use of certain tools that help speed up the process of completing a specific task. Even though a lot of these processes might be different for everyone I still feel the need to share this with you. At the end no knowledge is lost right!

## Tools I use to help speed up productivity

This is going to be a broad list so I’ll try and split them into different categories, I’ll be highlighting the tools I use when coding, writing, and other tools I think you will find helpful in general.

## Coding Tools

**GitKraken**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550393045469_Screen+Shot+2019-02-17+at+9.43.43+AM.png)

I found out about this tool recently from a friend and I really love using it. I’m a big fan of using the command line over using GUI but this tool is so much different. GitKraken is a GitHub client application that works just like the command line you are already used to but with intuitive UI/UX that makes for a great experience when you using this over the command line.



**Insomnia**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550393433785_Screen+Shot+2019-02-17+at+9.50.15+AM.png)

This tool is another one I really like using. It is similar to Postman but also allows your query GraphQL endpoints which is cool right. Insomnia is a Powerful HTTP and GraphQL tool belt that is available on Mac, Linux and Windows platforms. It features includes GraphQL support, SVG and image previews, AWS authentication etc.



**Visual Studio Code**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550393805099_Screen+Shot+2019-02-17+at+9.56.28+AM.png)

Visual Studio Code is a code editor that I really love using. I have been using for over a couple of years now and I’ve not found any reason to stop with constant improvements and new features added regularly this is my go to choice for a code editor.



**Dash**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550393860313_Screen+Shot+2019-02-17+at+9.57.24+AM.png)

Dash is a Mac application for developers that give you access to over 200+ API documentation offline for free. You can create your own docsets or even request for docs that are not included. For Windows users, an alternative for this app is[ Zeal App](https://zealdocs.org/).



**SourceTree**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550393949878_Screen+Shot+2019-02-17+at+9.58.09+AM.png)

Ever wanted to use GUI instead of the command line for Git. Then SourceTree is your best bet. I already mention GitKraken and they both do the same job I usually alternate between both apps occasionally. So I’ll say use what works best for you they are both great apps.

**Postico**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550393941779_Screen+Shot+2019-02-17+at+9.58.20+AM.png)

Postico is one client app for Postgres. It has a beautiful UI and it’s easily accessible I prefer using this to other apps I’ve found or even using the postgres command line.



**Hyper**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550393934437_Screen+Shot+2019-02-17+at+9.58.38+AM.png)

Hyper is one tool I love using, it is in fact my default terminal for coding.

## Writing

**Notion**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550394087029_Screen+Shot+2019-02-17+at+10.01.08+AM.png)

Notion is a tool for almost everything you need. I’m yet to come in contact with anyone with negative thoughts about this tool. It is super helpful. You can write, plan and collaborate with Notion.



**Dropbox Paper**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550394131871_Screen+Shot+2019-02-17+at+10.01.53+AM.png)

Paper by Dropbox is a great tool for writing. I frequently used this in creating notes, writing post and a lot of other things. It supports markdown formatting.



**Bear App**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550394165002_Screen+Shot+2019-02-17+at+10.02.32+AM.png)



**Caret**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550394221471_Screen+Shot+2019-02-17+at+10.03.21+AM.png)



## Deploying

**Netlify**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550394460332_Screen+Shot+2019-02-17+at+10.04.00+AM.png)



**Now**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550394468212_Screen+Shot+2019-02-17+at+10.04.20+AM.png)

**GitHub Pages**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550394477144_Screen+Shot+2019-02-17+at+10.04.36+AM.png)



**Zapier**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550394485706_Screen+Shot+2019-02-17+at+10.05.11+AM.png)

## Miscellaneous

**Rocket**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550394501488_4papv6sia3.gif)

**Spectacle**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550394696821_Screen+Shot+2019-02-17+at+10.09.47+AM.png)

**Numi**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550394514506_Screen+Shot+2019-02-17+at+10.07.06+AM.png)

**Taskade**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550394685532_Screen+Shot+2019-02-17+at+10.09.16+AM.png)

**RecordIt**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550394524806_Screen+Shot+2019-02-17+at+10.06.59+AM.png)

**Aware**

![](https://paper-attachments.dropbox.com/s_E948749FFF9AABC92D46BF495805D213A4C4E2668CE3B0F9FAB1649B51E48A0F_1550394673125_Screen+Shot+2019-02-17+at+10.10.51+AM.png)



## Conclusion

I hope you find all these tools listed useful and start using them to make your job a lot more easier. The idea is to share with you tools I found helpful and really I’d like it if you can also share with me tools you have found useful that are not listed here. Let’s all stay productive!
]]></content:encoded></item><item><title><![CDATA[How I Moved My Blog To Forestry CMS]]></title><description><![CDATA[I moved my content from writing in markdown to writing content with a CMS. This makes creating content seamless as I have most of the things I would manually do automated for me.]]></description><link>https://giftegwuenu.com/how-i-moved-my-blog-to-forestry-cms/</link><guid isPermaLink="true">https://giftegwuenu.com/how-i-moved-my-blog-to-forestry-cms/</guid><pubDate>Mon, 21 Jan 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[Here's a quick disclaimer. I use what works best for me, there are several other ways to write content for your blog. what matters to me is how to get the content out sooner and I found out going with this route could help me speed things up. This is what works for me, You can give it a try and see if it suits your needs too.

I came to a realization after looking out for better ways of creating content for my blog. I did a little research to find better options on how I could achieve this. After successfully migrating to use [Forestry](https://forestry.io "forestry") I figured why not write a blog post about it and that's exactly what I'm doing.

**My usual routine for creating content for my blog is usually -**

* I have a board on [Notion](https://www.notion.so) for curating blog post ideas and I pick one that I want to start with.
* Get started writing out the post in my usual markdown format (this is usually a pain because I have to make sure I'm following the required style guide for my blog)
* Then I copy and paste the entire post on [Grammarly](https://grammarly.com) to check for possible spelling errors.
* Then run a preview of the final copy to make sure everything looks great and accurate.

Now I've been doing that a lot so I got used to it until I found a better way which I'm about to tell you about. I've always wanted to migrate to using a CMS but didn't have the time to or skipped my schedule I finally got to it and found out it wasn't as hard as I thought it would be.

## Migrating to Forestry

[_Forestry.io_](https://forestry.io) _is a Git-backed CMS (content management system) for websites and web products built using static site generators. Forestry helps developers manage a content-based system into their websites seamlessly and there's also the benefits of collaborating with teams while at it.

![forestry](https://res.cloudinary.com/lauragift/image/upload/v1547728143/gift-egwuenu/Screen%20Shot%202019-01-17%20at%201.18.47%20PM.png)

In order for us to make this interactive I'll be going over the setup, I used for my blog with steps I took to achieve the final result.

#### 1. Create an account and setup your site

You will have to [create an account](https://app.forestry.io/signup) with forestry to get started. You can either sign up with your email address or use the 3rd party option GitHub which I recommend.

![img](https://res.cloudinary.com/lauragift/image/upload/v1547825330/gift-egwuenu/Screen%20Shot%202019-01-18%20at%204.28.21%20PM.png) 

After sign up. We'll be redirected to the dashboard page where we are to setup the site. Click on the new site button and select Hugo. [Hugo](https://gohugo.io) is a static site generator and that's what my blog is built with.

![img](https://res.cloudinary.com/lauragift/image/upload/v1547728339/gift-egwuenu/Screen%20Shot%202019-01-17%20at%201.30.54%20PM.png)

Now the next step is to connect to my blog's GitHub Repository. Remember to select the correct repo and branch you want content to be committed to.

![img](https://res.cloudinary.com/lauragift/image/upload/v1547728345/gift-egwuenu/Screen%20Shot%202019-01-17%20at%201.31.04%20PM.png)![img](https://res.cloudinary.com/lauragift/image/upload/v1547825760/gift-egwuenu/Screen%20Shot%202019-01-18%20at%204.34.47%20PM.png)

Now that you have created a site successfully you can now navigate to the dashboard where all sites created will be displayed.

![img](https://res.cloudinary.com/lauragift/image/upload/v1547728334/gift-egwuenu/Screen%20Shot%202019-01-17%20at%201.30.47%20PM.png)

#### 2. Setting up your Site CMS

Here's the fun part. There are a handful of options to make creating content with forestry seamless and you'll have to set that up yourself. Here's how I did mine.

* **Front Matter:** This is a base for all blog post and it is required that you have it setup so that for every new post you create it's autogenerated for you. I used to have my front matter in `yaml` format display below.

```md
  ---
  author: "Gift Egwuenu"
  date: 2019-01-16
  linktitle: eleventy-101
  title: Getting Started with Eleventy
  description: The era of static sites generators is ever growing due to the popularity of JamStack on the web. We'll learn how to get started with 11ty, a static site generator and explore its use cases.
  images: ['https://res.cloudinary.com/lauragift/image/upload/v1547576269/gift-egwuenu/Screen%20Shot%202019-01-15%20at%207.13.40%20PM.png']
  keywords:
    - staticsites
  weight: 10
  ---
```

But with Forestry you just have to build that up the way you want it and the other steps are automated for you.

  ![img](https://res.cloudinary.com/lauragift/image/upload/v1547826602/gift-egwuenu/Screen%20Shot%202019-01-18%20at%204.45.53%20PM.png)

* **Media:** Images are important when creating content for your post and Forestry have that figured out for you with an inbuilt media library all you need is to upload your images and use within your content. I also love the fact that you can integrate [Cloudinary](http://cloudinary.com) to handle all your images by simply setting it up. The only required step is to connect your cloudinary account to your site's settings.

  ![img](https://res.cloudinary.com/lauragift/image/upload/v1547827170/gift-egwuenu/Screen%20Shot%202019-01-18%20at%204.46.46%20PM.png)

#### 3. Deployment

I already have Netlify setup for deployment of my post which I connected with my GitHub Repo. I only needed to specify the build commands within forestry settings so that it runs the build command when I publish a post and this triggers the post to be changed from draft to published.  With this, I have to only wait a few minutes before the post goes live on my blog.

![img](https://res.cloudinary.com/lauragift/image/upload/v1547826554/gift-egwuenu/Screen%20Shot%202019-01-18%20at%204.46.31%20PM.png)

![img](https://res.cloudinary.com/lauragift/image/upload/v1547827582/gift-egwuenu/Screen%20Shot%202019-01-18%20at%204.36.39%20PM.png)

## Conclusion
Ever since I migrated to using this workflow, I've found out that it improved the way I write because of how everything is structured I only have to pull a few ropes to get a post published now and it is totally worth the move.

Let me know if this post is helpful and also your experience if you currently using a CMS.
]]></content:encoded></item><item><title><![CDATA[Getting Started with Eleventy]]></title><description><![CDATA[The era of static sites generators is ever growing due to the popularity of JamStack on the web. We'll learn how to get started with 11ty, a static site generator and explore its use cases.]]></description><link>https://giftegwuenu.com/getting-started-with-eleventy/</link><guid isPermaLink="true">https://giftegwuenu.com/getting-started-with-eleventy/</guid><pubDate>Wed, 16 Jan 2019 00:00:00 GMT</pubDate><content:encoded><![CDATA[
<!-- <iframe title="parler" style="width: 100%; max-height: 115px; border:none;" src='https://api.parler.io/ss/player?url=https%3A%2F%2Fwww.parler.io%2Faudio%2F16923918848%2Ff5a2aefd034c4c23303ac013b55cd0b7f324fd44.1767b4f5-64d9-46b9-b0e0-eb43db5ecc21.mp3'></iframe> -->

_Due to the ever evolving nature of the web, there's always a buzzword here and there or new tech popping, leaving us as developers in awe of what to actually learn and get a hang of._

_In a previous post I talked about_ [JamStack](https://www.giftegwuenu.com/what-is-jamstack-and-why-you-should-try-it/) _and how it is one of the best things that happened to the web and also reason why you should try it out. This post is going to introduce you to a static site generator called_ [Eleventy](https://www.11ty.io/) _also known as 11ty. We'll take a look at how to get started with it and also explore its use cases._

_![11ty](https://res.cloudinary.com/lauragift/image/upload/v1547576269/gift-egwuenu/Screen%20Shot%202019-01-15%20at%207.13.40%20PM.png "11ty")_

_Eleventy is a simpler static site generator. -- tag word simpler stating that it is going to be a breeze to work it. Eleventy is quite similar to Jekyll, but instead of Ruby it was written in JavaScript and requires a zero-config setup how interesting can this get?  It is still quite a new kid on the block in terms of how long other static sites have been going it was released early 2018_

_Eleventy is quite flexible to work with. It allows you pick a template to work with and you can choose one or use all together in a project. It supports the following templating languages:_

* _HTML_
* _Nunjucks_
* _EJS_
* _Markdown_
* _Liquid_
* _Handlebars_
* _Mustache_
* _Haml_
* _Pug_
* _JavaScript Template Literals (ES2015)_

_One great deal with 11ty is every template files in your directory is a page on it's own leading to great structure of codebase._

### _Prerequisites_

_This tutorial requires that you have version 8 of Node.js or higher and basic knowledge of JavaScript._

### _Installation_

```bash
// you can choose to install globally

  npm install -g @11ty/eleventy

// install locally within the project directory

  npm install --save-dev @11ty/eleventy
```

### _Running the app_

    // initialize a new project and navigate to the directory

    mkdir eleventy-site
    cd eleventy-site

    // run to start the app
    eleventy


![img](https://res.cloudinary.com/lauragift/image/upload/v1547579929/gift-egwuenu/Screen%20Shot%202019-01-15%20at%208.18.16%20PM.png)

_After running the_ `_eleventy_` _command we get the above report because we currently don't have any files for it to process. Let's add more content to our site._

```bash
  // create a README.md file and run the app

  ### Eleventy Site tutorial

  > I'm just testing out it's awesomeness
```

_Now we see an actual difference in the output with the file processed into an html file within the_ `___site/__` _folder._

![img](https://res.cloudinary.com/lauragift/image/upload/v1547580896/gift-egwuenu/Screen%20Shot%202019-01-15%20at%208.33.30%20PM.png)

_One of the benefits of using Static sites is really for efficiency and performance. Take note of how fast the file was processed in the output above._

### _Layout_

_Layouts are templates that can be used to wrap other content. In order to denote that a content should be wrapped within a template, we simply add the layout key to the front matter._

```md
<-- layout.md-->

---
layout: layout.njk
title: New Blog Post
---

# New Blog Post
```

_This content will be passed into the layout file as specified above_

```html
<-- _includes/layout.njk -->

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}}</title>
  </head>
  <body>
    {{ content | safe }}
  </body>
</html>
```

_The output for this template will now be populated with the data from the content file like so._

```html
<-- _site/layout/index.html -->

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Blog Post</title>
  </head>
  <body>
    <h1>New Blog Post </h1>
  </body>
</html>
```

### _Configuration_

_With Eleventy we can have a custom configuration that fits our need such that you override the default configuration settings by creating a_ `_.eleventy.js_` _file. We can leverage this by creating a custom configuration by modifying the default input and output directory like so._

```js
<-- .eleventy.js -->

module.exports = {
  dir: {
      input: "views",
        output: "dist"
    }
};
```

_A lot can be achieved with the custom configuration file. Here's a list of some_ [_configuration options_](https://www.11ty.io/docs/config) _that you can look up and add to the list within the config file._

### _Consuming Data_

_Eleventy can use data from different sources on a template. The order in  which it populates data from it sources ranges from highest priority to lowest priority. These are the sources according to that range._

* [Front Matter Data in a Template](https://www.11ty.io/docs/data-frontmatter/)
* [Front Matter Data in Layouts](https://www.11ty.io/docs/layouts/#front-matter-data-in-layouts)
* [Template Data Files](https://www.11ty.io/docs/data-template-dir/)
* [Directory Data Files (and ascending Parent Directories)](https://www.11ty.io/docs/data-template-dir/)
* [Global Data Files](https://www.11ty.io/docs/data-global/)

### _Deployment_

_A number of options are available for deploying 11ty sites. For one I really love using_ [_Netlify_](https://www.netlify.com/) _for the job. But I reckon anyone has the option of choosing to go with other choices for deploying, which works great too._

### _Wrapping Up_

_One of the ways in which we can embrace a new tech is by trying it out. This is a quick introduction to 11ty. Quite a number of developers are already building blogs, websites, documentation sites with eleventy and I think you should give it a try._]]></content:encoded></item><item><title><![CDATA[My 2018 Year in Review & 2019 Resolutions]]></title><description><![CDATA[2018 has been a really productive and long year so far for me. Here's my reflections on what I've been able to accomplish this year and plans Ihave for 2019.]]></description><link>https://giftegwuenu.com/my-2018-year-in-review-and-2019-resolutions/</link><guid isPermaLink="true">https://giftegwuenu.com/my-2018-year-in-review-and-2019-resolutions/</guid><pubDate>Thu, 20 Dec 2018 00:00:00 GMT</pubDate><content:encoded><![CDATA[

_Inspired by @una's article on her year in review and @ireaderinokun's post I decided to write mine so here it goes...._

I'm really excited and I needed to reflect on how the year has been for me which led me to write this post. Its been an amazing year and I can't wait to share what I've been able to achieve and plans for the new year 2019.

![me](https://res.cloudinary.com/lauragift/image/upload/v1545070543/IMG_20180217_120621-COLLAGE-COLLAGE_mdxope.jpg)


## Work

![Repo](https://res.cloudinary.com/lauragift/image/upload/v1545069379/Screen_Shot_2018-12-17_at_6.55.36_PM_uepe00.png)

Looking back at the past 11 months it still feels like yesterday. I remember in January when I had just started jotting down my 2018 resolutions and oh the things I planned to achieve. I wanted to grow and scale as a developer and I took networking with other developers and the community seriously this led me to getting a role as a remote open source developer at Okkur Labs. At the time I was really passionate about learning and contributing to open source projects. That was a big stepping stone for me just at the beginning of the year.

I left my Job at a startup and was focused on working remotely. For a period I felt lost and wanted to do more challenging work and that led me to apply for the Andela Fellowship. I got a job as a software developer at Andela and I've never looked back since then.

## Writing, Speaking, and Community
### **Started A Blog**
I remember I read an article from John Sonmez on blogging as a developer. I made it one of my goals for the year to start my personal blog and I went ahead to create one which is what you are currently reading 😁. I had no clue as to what I was going to be writing but I still went ahead to start it. I wrote 10 articles on my blog this year mostly based on front-end development, the things I'm currently learning and things I will like to share.

### **Gave a talk at a Conference**
**I gave my first talk at the Concatenate Conference!!** If anyone told me I will be giving a talk at a conference this year I'll simply tell them to stop joking I dreaded public speaking. I never had intentions to speak at a conference, all I really wanted was to attend one of those international conferences and that's still one of my goals but when I got this opportunity I had to go for it regardless of my fear of speaking in public and yes I gave a talk at Concatenate Conference about Crafting Rich Documentation with Vuepress.

https://twitter.com/lauragift21/status/1028227751524945921?ref_src=twsrc%5Etfw

### **Became a Chapter Lead for VueVixens Nigeria and Co-organizer for Concatenate Conference**
I also wanted to do more for the tech community. A way I could do this is to contribute my quota to the growth of the tech scene in my local community that led me to volunteer to be a lead for Vue Vixens in Nigeria. [Vue Vixens](https://vuevixens.org/) are foxy people who identify as women and who want to learn Vue.js to make websites and mobile apps. Watch this space because I'll be putting together several events to get more women interested in learning Vuejs together in 2019! I'm also a co-organizer for Concatenate Conference and we're making plans for a better Conference come 2019!


## Life Events

### **Photography**
I picked up interest in photography. I even went as far as saving up to get my own DSLR. I must say that was really fulfilling I wanted to do more street photography take pictures of the Lagos and if I had the chance to travel. Take stunning pictures of Nigeria and other Countries too. But as interesting as this dream was the only thing I could achieve was within Lagos state. But trust me I explored areas I've not been to this was really fun. I know I'll do better next year.

![img](https://res.cloudinary.com/lauragift/image/upload/v1545324643/IMG_2251-COLLAGE_zlbkqb.jpg)
<p style="text-align:center">Pictures from my Archives</p>

### **Health and Fitness**
I made a pact to ditch Soda this year and I'm happy I was able to reduce it even though I couldn't completely stop it. Overall I wanted to do more with my health. Lose a few pounds and live a healthier life in general. But like they stay consistency is key and to be sincere I wasn't consistent. For me, it was going from this diet to stopping and doing something different and from having regular morning runs to stopping and procrastinating forever 😞. I know how hard it is to keep a habit but I didn't do as much as I would have loved in terms of keeping track of my fitness life.



## And Plans For 2019.📙
I'll say I accomplished a lot this year and with that, I will definitely continue on the same path throughout 2019. I want to make an impact in my community by the work I'm doing so to keep me accountable these are some of the things I hope to get rolling in 2019.

**Writing 📝:** I want to be more consistent with my writing. I had a goal of publishing content bi-weekly and I could not keep up so  instead of making unrealistic goals I will instead set a goal to publish at least 2 articles monthly.

**Speaking 📣:** Now that I've broken the burden of public speaking. I will really love to do more in this space by sharing the knowledge I've acquired over time and giving talks on topics I'm really passionate about. I started submitting CFPs already keeping my fingers crossed 🤞.

**Organizing Event 🔖:** I'll be putting together an event for ladies that are interested in learning Vuejs. If you're interested please feel free to reach out to me on twitter. While I make plans for this, I hope to empower more women to brace up and join the tech community so we can even the gap we currently have a lot fewer women in the community.

**Personal Projects and Open Source 💻:** I have a whole lot of things to learn and be comfortable with this is inclusive of JavaScript so I want to practice learning by building. I did a lot of open source contributions this year looking at doing more of that next year.

**I want to read more books and listen to more Podcasts 📚**

**Absolutely learn how to drive! 🚗**

**Exercise more and live a healthier life. 🏃🏻‍♀️**

**Travel and Photography 😍❤️:** I will really love to travel more, see the world and take amazing pictures while at it.


**These are most of the things I'm looking forward to doing next year and to keep it realistic I'm just going to stop here. One of the reasons I decided to write a review is because I'm going to read this December 2019 and see how far I've gone with my goals which is amazing and fulfilling!**
]]></content:encoded></item><item><title><![CDATA[Introducing React Hooks]]></title><description><![CDATA[React v16.7.0 was introduced at the React Conf 2018 and Dan Abramov did the honors of letting the cat out of the bag when he introduced React Hooks.  We only just got a new release React v16.6.0:lazy, memo and contextType and now Hooks don’t you just love the react community.]]></description><link>https://giftegwuenu.com/introducing-react-hooks/</link><guid isPermaLink="true">https://giftegwuenu.com/introducing-react-hooks/</guid><pubDate>Tue, 04 Dec 2018 00:00:00 GMT</pubDate><content:encoded><![CDATA[
<!-- <iframe title="parler" style="width: 100%; max-height: 115px; border: none;" src='https://api.parler.io/ss/player?url=https%3A%2F%2Fwww.parler.io%2Faudio%2F16923918848%2Fb83af23d5742cb52468fd08ccb8342d0a3e6c2f9.bf9ce1dd-570b-42bc-bb7f-b23d7cc5c6d8.mp3'></iframe> -->

**[React v16.8.0](https://reactjs.org/docs/hooks-intro.html) was introduced at the React Conf 2018 and officially released in February 2019. [Dan Abramov] (https://twitter.com/dan_abramov) did the honors of letting the cat out of the bag when he introduced [React Hooks.](https://reactjs.org/docs/hooks-intro.html) We only just got a new release React v16.6.0: lazy, memo and contextType and now Hooks don't you just love the react community.**

## What are Hooks?

*Hooks are a new feature in React that lets you use state and other React features without writing a Class. This new feature allows you to hook into React state directly and allows you to write complex logic using only functional components without the need of any Class Component.*

*The idea behind this proposal was as a result of the following conceptions:*

-   *Complex components become exhausting to know and manage.*
-   *Classes confuse people and machines.*
-   *It's exhausting to reuse stateful logic between components.*

## Hooks in action

*I'm going to illustrate the difference between using Classic React components and the new React Hooks in the demo below.*

Class component with state
-------------------------

```js

import React, { Component } from "react";
import ReactDOM from "react-dom";

class App extends Component {
  state = {
    count: 0
  };
  setCount = () => {
    this.setState({ count: this.state.count + 1 });
  };
  render() {
    return (
      <>
        <h1>{this.state.count}</h1>
        <button onClick={this.setCount}>Click me</button>
      </>
      );
  }
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);

```
[View Demo](https://codesandbox.io/s/r726kwvm2m)

UseState with React Hooks
-------------------------

```js

import React, { useState } from "react";
import ReactDOM from "react-dom";

function Counter() {
// similar to this.state and this.setState
  const [count, setCount] = useState(0);
  const increment = () => setCount(count + 1);
  return (
    <>
      <h1>{count}</h1>
      <button onClick={increment}>Click me</button>
    </>
  );
}

const rootElement = document.getElementById("root");
ReactDOM.render(<Counter />, rootElement);

```
[View Demo](https://codesandbox.io/s/r726kwvm2m)

Using State Hooks
-----------------

*Here's what awesome about Hooks. It introduces new basic hooks we can use out of the box State Hooks and Effects hooks. You can also create custom hooks to hook into a functional component which is really cool. The demo presented above utilizes the State hook and generally, this is used to manage the state just like we used this.state in Class components. The useState() takes an argument which defaults to the initial state, This can be a string or a number. In the demo, we have useState(0) as the initial state for the count. useState() also takes in two variables the first value being the current state similar to this.state in Class components and the second value is the value we want the current state to be updated to similar to this.setState in Class Components.*

*The idea behind creating state hook is that we can now manage state in a functional component which takes away the need of being confused when should we actually use stateless component over stateful component.*

Using multiple states with Hooks
--------------------------------

*We can also have more than one state with the useState hooks all you need to do is to declare multiple useState hooks within the function.*

```js

import React, { useState } from 'react';

function multipleStates() {
  // Declare multiple state variables!
  const [count, setCount] = useState(0);
  const [cars, setCars] = useState('Lamborghini');
  const [menu, setMenu] = useState([{ menu: 'Scrambled Eggs' }]);
}

```
*Using multiple state variables is great but we can also use a single state variable. State variables can hold objects and arrays together, so we can still group related data together. However, in contrast to this.setState in a class component updating a state variable invariably replaces it rather than merging it.*

The Effect Hook
---------------

*Side effects occur when a procedure changes a variable from outside its scope. A typical example could be manually changing the DOM or fetching data from a different source.*

*The effect hook allows us to handle side effects in function components. If you're familiar with React class lifecycle methods, you can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined. This example describes how the useEffect hook works:*

*With Class component we track the side effect using lifecycle methods like componentDidMount, componentDidUpdate. An example of how to manage side effects in Class Components works like this:*

```js

class Example extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0
    };
  }
  componentDidMount() {
    document.title = `You clicked ${count} times`;
  }
  render() {
    return (
      <div>
        <p>You clicked {count} times</p>
        <button onClick={() => setCount(count + 1)}>Click me</button>
      </div>
    );
  }
```

```js

import React, { useState, useEffect } from "react";
import ReactDOM from "react-dom";

function Example() {
  const [count, setCount] = useState(0);
  /* handles lifecycle event just like
  componentDidMount and componentDidUpdate */
  useEffect(() => {
    document.title = `You clicked ${count} times`;
  });
  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>Click me</button>
    </div>
  );
}

const rootElement = document.getElementById("root");
ReactDOM.render(<Example />, rootElement);
```

[View Demo](https://codesandbox.io/s/r726kwvm2m)

*And with React hooks the same can be done using the useEffect hook, Whenever the component mounts, the effect hook will run after rendering including the first render. What the code illustrated above is doing is it updates the count on the document title, for every time the component renders.*

## Rules of React Hooks

*To use hooks effectively we need to adhere to two important rules and React also provides a [linter plugin](https://www.npmjs.com/package/eslint-plugin-react-hooks) to enforce these rules automatically.*

### Rule 1: Only call hooks at the top level

*The documentation suggests that we should not call Hooks inside loops, conditions, or nested functions:*

-   *By following this rule, you ensure that Hooks are called in the same order each time a component renders. That's what allows React to correctly preserve the state of Hooks between multiple useState and useEffect calls.  -[React](https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level) [Hook Rules](https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level)*

### Rule 2: Only Call Hooks from React Functions:

*The documentation goes on to state that we should not call Hooks from regular JavaScript functions:*

-  *By following this rule, you ensure that all stateful logic in a component is clearly visible from its source code.  [-React](https://reactjs.org/docs/hooks-rules.html#only-call-hooks-from-react-functions) [Hook Rules](https://reactjs.org/docs/hooks-rules.html#only-call-hooks-from-react-functions)*

*In order to automatically add the ESLint-Plugin to enforce these rules when working with React Hooks we need to follow these steps to install the plugin:*

```js
$ npm install eslint-plugin-react-hooks@next
```

```js

// Your ESLint configuration
{
  "plugins": [
    // ...
    "react-hooks"
  ],
  "rules": {
    // ...
    "react-hooks/rules-of-hooks": "error"
  }
}
```

-   *In the future, The Plugin will be installed by default into Create React App and similar toolkits.*

## Conclusion

*We have learned what Hooks is all about and how React Hooks brings with it all the possibilities that weren't attainable with the function components previously, we can now manage state within the React's function component and that takes away the need of having write class components for our applications. Now, this doesn't mean Class components aren't useful anymore, they are but to reduce the complexity of class component we can break them down into functional components that utilize the React Hooks. We can also write custom hooks for different functionality and this by far extends the use cases of React Hooks.*]]></content:encoded></item><item><title><![CDATA[The First Remote Nigerian Conference—Concatenate Conference 2018]]></title><description><![CDATA[Takeaways from the Concatenate Conference, a free conference for Nigerian developers with topics ranging from frameworks to design systems, performance to animation.]]></description><link>https://giftegwuenu.com/the-first-remote-nigerian-conference-concatenate-conference-2018/</link><guid isPermaLink="true">https://giftegwuenu.com/the-first-remote-nigerian-conference-concatenate-conference-2018/</guid><pubDate>Thu, 06 Sep 2018 00:00:00 GMT</pubDate><content:encoded><![CDATA[
I wrote an article for [Telerik](https://www.telerik.com/blogs) about a recap of the first remote conference in Nigeria. Concatenate Conf 2018.

[The First Remote Nigerian Conference—Concatenate Conference 2018](https://www.telerik.com/blogs/the-first-remote-nigerian-conference-concatenate-conference-2018)

![Image](https://lh3.googleusercontent.com/F9jJ-JrVUm-88tELKqtDZeMQrPygaMOJy9uHN5t7LI6_a3fvR6a7Y2eDrgn20tm2LKpJIBD7BOkHjMFMYInHgl7-sM8-mOgHmuQu49iV3drk0Log8vNSeqrxlq0Z0HoudkGPEsDTwLY6_xxDTTYaYqALuWI7n1Ix3nvFYhCb2YTTqXsNmjDsuQqnYwaVU6UCQZVtj83GN_PGCN_dI1MOengRe1gRRicdHJ-CEdYSblksQiKl7v2hZ31LvFzxY0b1IiyuAf2gXxhJ2tW34FAB_hVrqyA0bLz7XXHGI1X3bq2SY2g6mvn6Xuy_pGScVXxAfnAUtqi_04QfbD4OEBlHyc6Ykv-aiwfidMT1HcKhjNyREqIx1mtGCgoE6_c9TRBN8tRLQWg4OdKJhz7ijxq2E4FdSgTjaua-Kmq8l7upzH49fq3yNqQsOtM4nPsXH3UAabD51fklFizRBRHb7XIxnanJnFbzRjqTUT5HLaTBHfLwAIFmM1VpBN1dhvPMXmSZMedJ0WBHPNohehB3fAGrDYQIgJuqWavxHKPpM8eVCbsq0dlUDx8IelG6cT11eQiYTbuchzz1Vqk7IG-1EeSmvyuwPBX0auCL47KGrIb1ibX4nTl8L9wxwsRcgddLJPAqCAU_HUW9psqSMXBWnbQjyfqgmNQLVkpesBtzJ1qC0Uug9zgiaNaAwFq7yT36yKVWvJaES8Ne4QiEIJi_ShurHzb6=w478-h318-no)]]></content:encoded></item><item><title><![CDATA[Quick Guide to Linting JavaScript Codebase with ESLint]]></title><description><![CDATA[Linting is a way of keeping your code clean from any issues and generally improving your code style.]]></description><link>https://giftegwuenu.com/quick-guide-to-linting-java-script-codebase-with-es-lint/</link><guid isPermaLink="true">https://giftegwuenu.com/quick-guide-to-linting-java-script-codebase-with-es-lint/</guid><pubDate>Sun, 29 Jul 2018 00:00:00 GMT</pubDate><content:encoded><![CDATA[
<!-- <iframe title="parler" style="width: 100%; max-height: 115px; border: none;" src='https://api.parler.io/ss/player?url=https%3A%2F%2Fwww.parler.io%2Faudio%2F16923918848%2F14f848c2c826aa748e367ca4920584fedbf5dd8a.9d3b8a6f-bb7a-4797-b6f6-a3944e7284c6.mp3'></iframe> -->

*Linting in JavaScript is really important, Most developers tend to skip this step when developing software, When in an actual sense this should be one important step before starting out your projects.*

## What is Linting?

*Linting in Javascript is a coding style integration that checks your code quality and enable you to fix possible problems with your code style.*

## Why should you Lint?

*Yes why is this step actually important. I can kick off my project without worrying about this step right?
The answer to that is NO!! Some important reasons on why you should consider linting you JavaScript code are:*

- *It helps you figure out mistakes with your code.*
- *It helps you stay consistent with a preferred coding style.*
- *It saves you time debugging syntax errors.*

## ESLINT
*[ESLint](https://eslint.org/) is an open source project originally created by Nicholas C. Zakas in June 2013. Its goal is to act as a tool for identifying and reporting on patterns found in JavaScript code, with the goal of making the code more consistent and avoiding bugs.*

## Installation
*ESLint requires Node.js >6.14 to run. It can also be installed using two different methods, either Globally or Locally.*

### Local Installation
*If you want to use ESLint as a part of your project build system it is recommended to install it locally. You can achieve that By following these steps:*

```js

$ npm install eslint --save-dev // or yarn install eslint --dev

// setup eslint configuration by running
$ ./node_modules/.bin/eslint --init

// After that, you can run ESLint in your project’s root directory like this:

$ ./node_modules/.bin/eslint yourfile.js

```

### Global Installation
*If you want to make ESLint available to tools that run across all of your projects, we recommend installing ESLint globally. You can do so using npm:*

```js

$ npm install -g eslint // or yarn add global eslint

// initial eslint configuration
$ eslint --init

// After that, you can run ESLint in your project’s root directory like this:
$ eslint yourfile.js

```

## Code Editor Integration
*Another cool tool you can integrate into your code editor preferably VS Code is installing the [ESLint extension](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)*

## ESLint Configuration

*ESLint is designed to be configured in so many different ways to suit your use case. You require a `.eslintrc.json` file which will act as a config file. ESLint also enables you to integrate a style guide to stick with when you writing code. Some examples include:*

- [Airbnb Style Guide](https://github.com/airbnb/javascript)
- [Google Style Guide](https://google.github.io/styleguide/jsguide.html)
- [React Style Guide](https://github.com/airbnb/javascript/tree/master/react)

```js

// install it as a dev dependency
npm install --save-dev eslint-config-airbnb // or yarn add --dev eslint-config-airbnb

// add the style guide name i.e:airnbnb
{
  "extends": "airbnb"
}

```
## ESLint Rules

*Eslint comes bundled with a large number of rules, which you can either work with or modify the rules your project requires by either using configuration files or configuration comments.* *The following are the rules guidelines:*

```js

- "off" or 0 - turn the rule off
- "warn" or 1 - turn the rule on as a warning (doesn’t affect exit code)
- "error" or 2 - turn the rule on as an error (exit code is 1 when triggered)

```

*To configure rule inside a config file `eslintrc.json` you need to add the rules key and the options you want to modify, For example:*

```js
// sets the no-console rule off
"rules" : {
  no-console: 0; // or "off"
}

```

*To configure rules within a configuration comment you need to add the rules key and the options you want to modify, For example:*

```

// This disables the entire eslint rules in a js file
/* eslint-disable */
console.log('test');

// This disable a specific rule within a js file
/* eslint-disable  no-console*/
console.log('test');

// This disable a specific rule on a  single line
console.log('test'); // eslint-disable-line no-console

```

>Using a linting library is really important and ESLint is one tool that solves the problem of writing error-prone code.
]]></content:encoded></item><item><title><![CDATA[Setup Continuous Integration with Travis CI in Your Nodejs App]]></title><description><![CDATA[This tutorial will take you through how to setup CI with travis in nodejs app]]></description><link>https://giftegwuenu.com/setup-continuous-integration-with-travis-ci-in-your-nodejs-app/</link><guid isPermaLink="true">https://giftegwuenu.com/setup-continuous-integration-with-travis-ci-in-your-nodejs-app/</guid><pubDate>Fri, 22 Jun 2018 00:00:00 GMT</pubDate><content:encoded><![CDATA[
<!-- <iframe title="parler" style="width: 100%; max-height: 115px; border: none;" src='https://api.parler.io/ss/player?url=https%3A%2F%2Fwww.parler.io%2Faudio%2F16923918848%2F0c36c2d676426bcaac9fa74cee12dbd86607a879.59c77039-9f59-4802-896c-22ccfd8feeff.mp3'></iframe> -->

This post will explain in detail how to go about setting up [Travis CI](https://travis-ci.org/) deployment in a nodejs project.

**What is Continuous Integration?**  
[Continuous Integration](https://en.wikipedia.org/wiki/Continuous_integration) is the continuous practice of merging in small code changes frequently - rather than merging in a large change at the end of a development cycle. The goal is to build healthier software by developing and testing in smaller increments. This is where Travis CI comes in.

### Project Setup
In order to test the way Travis CI works we need to setup a Node project with tests.
Make sure you have node and npm installed `node -v` and `npm -v` to check the versions.


```
# start up your project

mkdir travis-ci
cd travis-ci
npm init

# install the dependencies required for this project
npm install express mocha chai
```

create an _index.js_ file  in root directory with the following.

```
# index.js

const express = require('express');

const app = express();

app.get('/', (req, res) => {
  res.send('ci with travis');
});

const server = app.listen(3000, () => {
  console.log('App running on port 3000');
});

module.exports = server;
```

Also create a test folder and an __index-spec.js__ file for testing our node app.

```
# index.spec.js

const expect = require('chai').expect
const server = require('../index');

describe('test', () => {
  it('should return a string', () => {
    expect('ci with travis').to.equal('ci with travis');
  });
});

```
![test](https://res.cloudinary.com/lauragift/image/upload/v1529662546/Screenshot_from_2018-06-22_11-11-40_nyow0d.png)

**NPM Script**  
Make sure app and test is working by running these scripts.
```

"scripts": {
  "start": "node index.js",
  "test": "mocha"
}
```

**Travis Setup**

create a file __.travis.yml__ in your root directory.

```

language: node_js
node_js: 
  - "stable"
cache:
  directories:
    - "node_modules"
```
The .travis.yml file indicated above is what instructs Travis on what to build. the language option can be whatever language your app is running in and the "node_js": "stable" indicates Travis should use a stable version of node. You can also cache your node_modules directory on Travis to avoid installing all dependencies every time a build is triggered but rather it updates packages that has newer versions. more options that be added to this file can be found [here](https://docs.travis-ci.com/user/getting-started/).

### _Integrate Travis with GitHub_

Travis is a CI service which simply means it a automated process. A typical workflow with Travis ad GitHub goes like this:  
_* A commit is pushed to to GitHub_  
_* Travis build is triggered and it checks if the test is passing or failing._

![travis ui](https://res.cloudinary.com/lauragift/image/upload/v1529664742/Screenshot_from_2018-06-22_11-49-48_abjiek.png)

#### Travis Build setup

_* Create a github repo and push the project folder to GitHub._  
_* Add the repo to [Travis Website](https://travis-ci.org/)_  
_* Make a change and push a commit to the repo. You should automatically see your build process running._  
_* Add the travis badge to a README.md file in your GitHub repo._

**Conclusion**
Travis CI makes developing software efficient. it ensures you deploy clean code that follows good practice and also detects if there are possible bugs or deficit in your code caused by a change or refactor in your project.

All code is available on the [Github repo](https://github.com/lauragift21/travis-blog).

_Also feel free to leave a comment with questions or thoughts._]]></content:encoded></item><item><title><![CDATA[A Collection of Essential VSCode  Extensions]]></title><description><![CDATA[Every developer makes use of a code editor as a tool for the trade in this tutorial i'll be highlighing my go to extensions for vscode.]]></description><link>https://giftegwuenu.com/a-collection-of-essential-vs-code-extensions/</link><guid isPermaLink="true">https://giftegwuenu.com/a-collection-of-essential-vs-code-extensions/</guid><pubDate>Sat, 12 May 2018 00:00:00 GMT</pubDate><content:encoded><![CDATA[
<!-- <iframe title="parler" style="width: 100%; max-height: 115px; border: none;" src='https://api.parler.io/ss/player?url=https%3A%2F%2Fwww.parler.io%2Faudio%2F16923918848%2F3c00f05e48983cb894ca64bbcdc273a062fce423.85bd849a-07ff-4629-a339-d554bb6070a2.mp3'></iframe> -->

_Code Editors are one of the essential tools for a Developer as long as you write code. But an interesting fact is every developer loves to enhance thier workflow and be more productive. I mean why waste time trying to achieve a task when there's a tool to do that. That brings us to the topic extensions for Vscode. These tools goes a long way in helping developers maintain thier codebase and also promote productivity. Ever since i switched to Vscode i've found the following extensions to be my holy grail. I pretty much can't do without them don't get me wrong i mean they're awesome tools to have around. Let's cut to the chase shall we._

**[PRETTIER:](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)** _is an awesome tool for keeping consistent codebase. It is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary._

![prettier](https://github.com/remimarsal/prettier-now-vscode/raw/master/prettier-now2.gif)


**[ESLINT:](https://github.com/Microsoft/vscode-eslint)**  _i have a love-hate relationship with this tool because it's automated and i get to know what i'm doing wrong at a glance. The extension uses the ESLint library installed in the opened workspace folder. If the folder doesn't provide one the extension looks for a global install version. If you haven't installed ESLint either locally or globally do so by running `npm install eslint` in the workspace folder for a local install or `npm install -g eslint` for a global install._

![esint](https://cdn-images-1.medium.com/max/800/1*W1gdb9Ae62PH0W2ZnquVCg.gif)

**[GITLENS:](https://github.com/eamodio/vscode-gitlens)** _This extension is a powerful in ways you can't imagine. It has the ability to provide Git information (most recent commit, list of authors) in CodeLens, on-demand inline blame annotations, a blame explorer, and commands to compare changes with the working tree or previous versions._

![](https://raw.githubusercontent.com/eamodio/vscode-gitlens/master/images/gitlens-preview.gif)

**[VUE 2 SNIPPETS:](https://marketplace.visualstudio.com/items?itemName=sdras.vue-vscode-snippets)**
_This extension will supercharge your Vue workflow. Easily scaffold Vue directives like v-for, v-if, v-show and more without running to the docs to confirm if you got the syntax right._

![vue](https://s3-us-west-2.amazonaws.com/s.cdpn.io/28963/SnippetDemo.gif)

**[MARKDOWNLINT:](https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint)** _Markdownlint is a Visual Studio Code extension that includes a library of rules to encourage standards and consistency for Markdown files. It is powered by markdownlint for Node.js which is based on markdownlint for Ruby._


#### 💡 Awesome Resource for VScode Tips [VSCODECANDOTHAT](https://vscodecandothat.com/)]]></content:encoded></item><item><title><![CDATA[Quick Setup of Oh My ZSH! terminal on Ubuntu]]></title><description><![CDATA[Oh My Zsh is a delightful, open source, community-driven framework for managing your Zsh configuration.Learn the nitty gritty of using Oh My Zsh for make your terminal com alive]]></description><link>https://giftegwuenu.com/quick-setup-of-oh-my-zsh-terminal-on-ubuntu/</link><guid isPermaLink="true">https://giftegwuenu.com/quick-setup-of-oh-my-zsh-terminal-on-ubuntu/</guid><pubDate>Fri, 27 Apr 2018 00:00:00 GMT</pubDate><content:encoded><![CDATA[
<!-- <iframe title="parler" style="width: 100%; max-height: 115px; border: none;" src='https://api.parler.io/ss/player?url=https%3A%2F%2Fwww.parler.io%2Faudio%2F16923918848%2F6f48f43e318a0676ad198fa89223a3f758fee41d.4ef465eb-2ff9-47f2-a1ea-b45b63e798e3.mp3'></iframe> -->

Tired of the good ol' boring looking terminal? Do you want to try something different and funky then you should definitely try Oh-my-zsh! As developers, we can't deny the fact that the Command line terminal is part of our existence._

![banner](https://res.cloudinary.com/lauragift/image/upload/v1524834046/Screenshot_from_2018-04-27_13-58-51_ffofu9.png)

_[Oh-My-Zsh](http://ohmyz.sh/) is an open source, community-driven framework for managing your ZSH configuration. It comes bundled with a ton of helpful functions, helpers, plugins, themes, and a few things that will make you shout._

__*Prerequisites*__
------

_* Disclaimer: Oh My Zsh works best on macOS and Linux._

+ Unix-like operating system (macOS or Linux)

+ Zsh should be installed (v4.3.9 or more recent). `sudo apt-get install zsh` If not pre-installed (zsh --version to confirm), curl or wget should be installed

+ git should be installed

__*Installation*__
----

_Via wget_

```

$ sh -c "$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"

```

_Via curl_

```

$ sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

```
Now we have zsh and oh-my-zsh installed next step is to go ahead with configuration.

**THEMES**
-----------

Oh-My-Zsh comes bundled with several [themes](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes) located in `~/.zshrc/themes` which can be enabled by adding the name of the theme in the ~/.zshrc file.

```bash
# nano ~/.zshrc
# This can be changed to whatever theme is preferred
ZSH_THEME="agnoster"
```

![agnoster](https://res.cloudinary.com/lauragift/image/upload/v1524845811/Screenshot_from_2018-04-27_17-12-52_nlj66n.png)

**PLUGINS**
-----------

Oh-my-zsh also includes a handful of [plugins](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins) available to help make development faster and easier. One of my best is the fact that auto-completion works out of the box. You would not need to type a whole command just hitting tab helps by suggesting possible command related to your needs.

Another awesome thing to try is the [zsh-syntax-highlighting](https://github.com/zsh-users/zsh-syntax-highlighting)  This package provides syntax highlighting for the shell zsh. It enables highlighting of commands whilst they are typed at a zsh prompt into an interactive terminal. This helps in reviewing commands before running them, particularly in catching syntax errors.

__Tip 💡__

_You can easily switch between bash and zsh by running this command_

```bash
# switching from zsh to bash
exec bash
```

```bash
# switching from bash to zsh
exec zsh
```

_There you go, I hope after reading this you switch from whatever shell you were using to zsh and also try out oh-my-zsh they are both awesome.🚀_

_Feel free to share your comments and thoughts._
]]></content:encoded></item><item><title><![CDATA[Getting Started With VuePress]]></title><description><![CDATA[VuePress is a Vue-powered Static Site Generator mainly designed for documentation purposes.]]></description><link>https://giftegwuenu.com/getting-started-with-vue-press/</link><guid isPermaLink="true">https://giftegwuenu.com/getting-started-with-vue-press/</guid><pubDate>Sat, 21 Apr 2018 00:00:00 GMT</pubDate><content:encoded><![CDATA[
![banner](https://thepracticaldev.s3.amazonaws.com/i/xnkv5z7k6vl3qs495q1d.png)

<!-- <iframe title="parler" style="width: 100%; max-height: 115px; border: none;" src='https://api.parler.io/ss/player?url=https%3A%2F%2Fwww.parler.io%2Faudio%2F16923918848%2F9daf3c69e555521c19cd73a938fbd1b677a2fa13.d560bbbc-cfd5-4e3e-9f8c-64e0c6f0e500.mp3'></iframe> -->

*[VuePress](https://VuePress.vuejs.org/) is the new kid on the block on the list of static site generators. Vue creator Evan You came up with this awesome tool for writing documentation for Vue based project well that was the inspiration behind the project, But this powerful tool can also be customized to fit your needs.*

*A VuePress site is, in fact, an SPA powered by Vue, Vue Router, and webpack. After the build, a server-rendered version of the app is created. Similar to Nuxt's and Gatsby approach.*

*Each markdown file is compiled into HTML with markdown-it and then processed as the template of a Vue component. This allows you to directly use Vue inside your markdown files and is great when you need to embed dynamic content.*

### Features

- Built-in Markdown extension
- Default Theme
- Automatic Service Worker
- Google Analytics Integration
- Multi-language Support

### Installation

```js
// install globally
yarn global add VuePress
npm install -g VuePress

// create a markdown file
echo '# Hello VuePress' > docs/README.md

// start writing
VuePress dev

// build
VuePress build
```

After the setup we should configure the site, VuePress is highly customizable it ships with the default theme which can be configured [here](https://VuePress.vuejs.org/config/). This is file needed to configure a VuePress website is  `docs/.VuePress/config.js`

```js
module.exports = {
  title: "Welcome to Wakanda",
  description: "The cultured people of Wakanda welcome you"
}
```

Now we can add more data into our markdown `README.md` file

```js
---
home: true
actionText: Get Started →
actionLink: /guide/
features:
- title: Simplicity First
  details: Minimal setup with markdown-centered project structure helps you focus on writing.
- title: Vue-Powered
  details: Enjoy the dev experience of Vue + webpack, use Vue components in markdown, and develop custom themes with Vue.
- title: Performant
  details: VuePress generates pre-rendered static HTML for each page, and runs as an SPA once a page is loaded.
footer: MIT Licensed | Copyright © 2018-present Evan You
---
# Wakanda Heritage

## Alert Options

::: tip
This is a tip
:::

::: warning No
This is a warning
:::

::: danger
This is a dangerous warning
:::

### Line highlight in code blocks

```js

export default {
  data () {
    return {
      msg: 'Highlighted!'
    }
  }
}

```

#### Using Vue in Markdown

```

{{ 4 + 5 * 9 }}

<MyComponent :start="5"></MyComponent>

```

With markdown content, we can achieve a lot by using Vue's inbuilt syntax and also using vue component. All markdown files are compiled into Vue components and processed by webpack, therefore you can and should prefer referencing any asset using relative URLs.


### Overriding Styles

If you want to override the styling you can simply do that by creating a `.VuePress/override.styl` to change the default theme styles.

```css

$accentColor = #3eaf7c
$textColor = #2c3e50
$borderColor = #eaecef
$codeBgColor = #282c34

```

### Deploying with Netlify

The following guides assume you are placing your files inside the docs directory of your project and using the default build output location.
Your `package.json` file should have the following commands for building your docs.

```js

"scripts": {
  "dev": "VuePress dev:docs"
  "build": "VuePress build:docs"
}

```

Netlify is one of the best CDN for Static websites, I'll be deploying this VuePress project on Netlify, setup up a new project from GitHub with the following settings:

```js

Build Command:npm run docs:build or yarn docs: build
Publish directory:docs/.VuePress/dist

```

Hit the deploy button!

![Wakanda](https://res.cloudinary.com/lauragift/image/upload/c_crop/v1524289619/Screenshot_from_2018-04-20_22-33-04_pgvl39.png)

VuePress is amazingly fast and easy to get started with this tutorial breaks all VuePress is capable of doing in bite-sized sections. With the ability to write Vue within markdown files, customize themes and also delivers a pre-rendered HTML and runs as an SPA when loaded. Feel free to checkout the [docs](https://VuePress.vuejs.org/guide/) to find out more about what VuePress offers. Our final project [lives here](https://gallant-nobel-d7c6cd.netlify.com/) and [repo](https://github.com/lauragift21/VuePress).

_Also feel free to leave a comment with questions or thoughts on VuePress._]]></content:encoded></item><item><title><![CDATA[What is JAMstack and Why You Should Try It]]></title><description><![CDATA[JAMstack is a modern web development architecture based on client-side JavaScript, reusable APIs, and prebuilt Markup.]]></description><link>https://giftegwuenu.com/what-is-ja-mstack-and-why-you-should-try-it/</link><guid isPermaLink="true">https://giftegwuenu.com/what-is-ja-mstack-and-why-you-should-try-it/</guid><pubDate>Sun, 15 Apr 2018 00:00:00 GMT</pubDate><content:encoded><![CDATA[
<!-- <iframe title="parler" style="width: 100%; max-height: 115px; border: none;" src='https://api.parler.io/ss/player?url=https%3A%2F%2Fwww.parler.io%2Faudio%2F16923918848%2Fe4510f8079e5e5667b049c75e8e98f2349c57f08.28cb8043-e474-44b9-ac4e-5ab9a7256346.mp3'></iframe> -->

Have you ever wanted to build a modern web application without all the gimmick then you should have already heard of the `JAMstack` where `JAM` stands for `JavaScript API's and Markup`.

### "JAMstack: noun \’jam-stak’\
### Modern web development architecture based on client-side JavaScript, reusable APIs, and prebuilt Markup"

The ever changing world of the web never cease to amaze us. Static Websites are popular, super efficient and extremely fast which makes it a good fit for blogs, resumes, portfolio, landing pages and documentation. So yeah Jamstack is cool why should i use it you ask?

### Reasons You Should Consider JAMstack

- **Better Performance**: If you ever wanted to build your websites on the go with flawless speed and performance your best choice will be to go with the JAMstack. Build your files only on deployment served over a CDN.

- **Cheap and Fast Deployment**: Jamstack websites can easily be deployed without going through the hassle of configuring databases, securing .htaccess and so on. We are only dealing with static files so it is eady to integrate a [fast CDN](https://www.slant.co/topics/2256/~static-website-hosting-provider) to get up and running.

- **Awesome Developer Experience**: Learning and using JAMstack is not as difficult as you might think it is. With just HTML, CSS and JS experience developers can build complex websites. JAMstack doesn't require a complex language to start with, It also allows the selection of CMS options for site generators remove the need to maintain a separate stack for content and marketing.

- **High Security**: Static Websites have very low potential to vulnerabilities because it is just HTML files and external API handling   served over a CDN. This reduces any possible risk or attack to the website. It is easy to integrate SSL certificate with [Let's Encrypt](https://letsencrypt.org/). Also leverage the use of server side microservice APIs to secure the websites.

- **Great Community**: The JAMstack community is a growing over time. New support for various functionality springs up every day. Even exciting is the [local community meetups](https://jamstack.org/community/) being created. The [Online community](https://gitter.im/jamstack/community) is also amazing.

Another great feature to consider is the ability to integrate core dynamic functionalities into JAMstack websites. JAMstack is more or less hyper-dynamic than you can imagine, This technology have the ability to handle dynamic server-side features,thinking of handling backend functions tools like [Webtask](https://webtask.io/) and [Serverless](https://serverless.com/). Form handling on the go with [Formspree](https://formspree.io/) or [Netlify Forms](https://www.netlify.com/docs/form-handling/). Full Search capability [Google Search](https://cse.google.com/cse/), [lunr.js](https://lunrjs.com/) and [Algolia](https://www.algolia.com/) is  There are quite a number of tools available to integrate with JAMstack. The list is available [here](https://www.thenewdynamic.org/tools/) and [here](http://cloudcannon.com/tips/2014/12/12/the-ultimate-list-of-services-for-static-websites.html)

A whole lot of companies have already joined the bandwagon so what are you waiting for?

## Examples of websites

![screenshot](https://res.cloudinary.com/lauragift/image/upload/v1523804538/2-screenshot_r6uux6.png)
![screenshot](https://res.cloudinary.com/lauragift/image/upload/v1523804647/JAMstack_JavaScript_APIs_and_Markup_1_ys6djd.png)

## Useful JAMstack Resources

- [StaticGen.com](http://www.staticgen.com/)
- [5 Reasons to try JAMstack](https://builtvisible.com/go-static-try-jamstack/)
- [Jamstack.org](https://jamstack.org/)
- [Using A Static Site Generator At Scale: Lessons Learned by SmashingMag](https://www.smashingmagazine.com/2016/08/using-a-static-site-generator-at-scale-lessons-learned/)
- [Build a Static Site with Hugo and Deploy with Netlify](https://www.giftegwuenu.com/2018/03/20/build-a-static-site-with-hugo-and-deploy-with-netlify/)
- [Static Websites + JAMstack = <3](https://julian.is/article/static-websites-and-jamstack/)
- [An Introduction to Static Site Generators](https://davidwalsh.name/introduction-static-site-generators)]]></content:encoded></item><item><title><![CDATA[How to Center Anything in CSS]]></title><description><![CDATA[Learn how to center elements with Flexbox and CSS Grid.]]></description><link>https://giftegwuenu.com/how-to-center-anything-in-css/</link><guid isPermaLink="true">https://giftegwuenu.com/how-to-center-anything-in-css/</guid><pubDate>Fri, 23 Mar 2018 00:00:00 GMT</pubDate><content:encoded><![CDATA[
Centering in CSS can be a pain in the ass. There are several methods to achieve just one task, centering an element. To cut to the chase i'll outline two quick methods to achieve this in a jiffy ✈.

## Flexbox Method

```
<div class="flex">EGWUENU GIFT NDUDI</div>
<!-- CSS using flexbox as a default method for centering div -->
```

```css
.flex {
margin: 20px;
font-size: 30px;
color: #133B49;
font-family: 'Ubuntu', sans-serif;
display: flex;
justify-content: center;
align-items: center;
}
```

## Grid Method

```html
<div class="flex">EGWUENU GIFT NDUDI</div>
<!-- CSS using grid system as a default method for centering div -->
```

```css
.grid {
margin: 20px;
font-size: 30px;
color: #D6005C;
font-family: 'Ubuntu', sans-serif;
display: grid;
justify-items: center;
align-items: center;
}
```

 <p data-height="265" data-theme-id="light" data-slug-hash="QmMbma" data-default-tab="css,result" data-user="lauragift21" data-embed-version="2" data-pen-title="Centering in CSS" data-preview="true" class="codepen">
 
 See the Pen <a href="https://codepen.io/lauragift21/pen/QmMbma/">Centering in CSS</a> by Egwuenu Gift (<a href="https://codepen.io/lauragift21">@lauragift21</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>

> "There are 1000 ways to do a particular thing in CSS. The question is are you doing it correctly? - Unknown"]]></content:encoded></item><item><title><![CDATA[Build a Static Site with Hugo and Deploy with Netlify]]></title><description><![CDATA[Hugo is a static site generator. We'll be looking at how to build a static site generator with Hugo and deploy to Netlify]]></description><link>https://giftegwuenu.com/build-a-static-site-with-hugo-and-deploy-with-netlify/</link><guid isPermaLink="true">https://giftegwuenu.com/build-a-static-site-with-hugo-and-deploy-with-netlify/</guid><pubDate>Tue, 20 Mar 2018 00:00:00 GMT</pubDate><content:encoded><![CDATA[
<!-- <iframe title="parler" style="width: 100%; max-height: 115px; border: none;" src='https://api.parler.io/ss/player?url=https%3A%2F%2Fwww.parler.io%2Faudio%2F16923918848%2F4e14e9cd196b843045b1c504a7656d71b2930c37.306c19cd-4385-4366-8542-3dd992d86bbe.mp3'></iframe> -->

 I'll be highlighting how to build a quick site with Hugo and deploy to netlify in a jiffy. But we have to understand what Hugo and Netlify are before we start building.

 [**Hugo**](https://gohugo.io) is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.

 [**Netlify**](https://www.netlify.com) is a unified platform that automates your code to create high-performant, easily maintainable sites, and web apps.


#### Step 1: Install Hugo

 To be able to use Hugo we will need to install it by running this command for Mac or Ubuntu users.

```js
brew install Hugo
```

```js
sudo apt-get install Hugo
```

#### Step 2: Create a new Hugo site

```js
hugo new site -siteName
```

#### Step 3: Pick a theme

One of my best features of Hugo is you get to pick from a diverse list of themes available here [hugo themes](https://themes.gohugo.io/), Go ahead and pick a theme I'll be using hugo-hikari-theme. Make sure you go through the instructions for using the theme.

Copy the theme.toml into your config.toml file.

#### Step 4: Running the theme

```js
hugo server
```

You should get a build process and  a message like so:

```js
Server is available at http://localhost:1818/
```

Feel free to modify the theme to your personal preference.

#### Step 5: Deploy to Netlify

This is pretty much the easiest step to finally get our site running live we simply need to create an account with netlify, connect your GitHub profile to netlify.

![alt text](https://cdn.netlify.com/6ce8bf46dcc8bfc6d6ef982c7870eb86e32d2b8c/89152/img/blog/step-2-hugo.png)

After that step create a new site from the Netlify dashboard and connect your remote repository on GitHub.

Create a deploy command with this setting and deploy.

![Screenshot](https://res.cloudinary.com/lauragift/image/upload/v1519148146/Screenshot_from_2018-02-20_18-30-47_zoifgr.png)

Viola, you have successfully built and deployed your site with Hugo and Netlify with these quick steps.
]]></content:encoded></item><item><title><![CDATA[Introduction]]></title><link>https://giftegwuenu.com/introduction/</link><guid isPermaLink="true">https://giftegwuenu.com/introduction/</guid><pubDate>Thu, 08 Feb 2018 00:00:00 GMT</pubDate><content:encoded><![CDATA[
### **Hello World**

Hi! It's a sunny afternoon over here in Lagos Nigeria. I finally decided to start my personal blog. In case you were wondering My name is Egwuenu Gift Ndudi, Front End Developer from Lagos, Nigeria. I know it's clearly written on the blog but proper introduction is still required. This has been on my mind for a while now. Happy I'm finally putting this to work.

### Purpose

I decided to start #CNC2018 challenge Blog/Write more and writing is a great way of teaching other developers and myself better ways to solve coding problems. I intend to write about the things I learn and also include anything related to software development. P.S Mostly front-end development.


That was a quick introduction I intend to start posting every week. Hopefully this turns out great. Feel free to reach out to me if you have any comments or questions.
]]></content:encoded></item></channel></rss>